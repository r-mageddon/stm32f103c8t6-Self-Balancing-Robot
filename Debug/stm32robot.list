
stm32robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006160  08006160  00007160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006200  08006200  00008090  2**0
                  CONTENTS
  4 .ARM          00000000  08006200  08006200  00008090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006200  08006200  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006200  08006200  00007200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006204  08006204  00007204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08006208  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000090  08006298  00008090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08006298  00008348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aedd  00000000  00000000  000080b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190b  00000000  00000000  00012f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  000148a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a3  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017629  00000000  00000000  00015e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc5c  00000000  00000000  0002d4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5f5  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c56fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b3c  00000000  00000000  000c5784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c92c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08006144 	.word	0x08006144

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08006144 	.word	0x08006144

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <MPU6050_Init>:
float current_time = 0, delta_t = 0, last_time = 0;


/* MPU6050 INITIALISE */
void MPU6050_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
	uint8_t check, data;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2275      	movs	r2, #117	@ 0x75
 8001078:	21d0      	movs	r1, #208	@ 0xd0
 800107a:	4823      	ldr	r0, [pc, #140]	@ (8001108 <MPU6050_Init+0xa8>)
 800107c:	f001 fd9e 	bl	8002bbc <HAL_I2C_Mem_Read>
	if (check == 0x68)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b68      	cmp	r3, #104	@ 0x68
 8001084:	d13b      	bne.n	80010fe <MPU6050_Init+0x9e>
	{
		// Wake up Device
		data = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MNGMT_1_REG, 1, &data, 1, 1000);
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	226b      	movs	r2, #107	@ 0x6b
 800109c:	21d0      	movs	r1, #208	@ 0xd0
 800109e:	481a      	ldr	r0, [pc, #104]	@ (8001108 <MPU6050_Init+0xa8>)
 80010a0:	f001 fc92 	bl	80029c8 <HAL_I2C_Mem_Write>

		// Set data rate
		data = 0x07; // 1kHz
 80010a4:	2307      	movs	r3, #7
 80010a6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2219      	movs	r2, #25
 80010ba:	21d0      	movs	r1, #208	@ 0xd0
 80010bc:	4812      	ldr	r0, [pc, #72]	@ (8001108 <MPU6050_Init+0xa8>)
 80010be:	f001 fc83 	bl	80029c8 <HAL_I2C_Mem_Write>

		// Configure Gyroscope
		data = GYRO_250; // range = +/- 250 deg
 80010c2:	2300      	movs	r3, #0
 80010c4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data, 1, 1000);
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	221b      	movs	r2, #27
 80010d8:	21d0      	movs	r1, #208	@ 0xd0
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <MPU6050_Init+0xa8>)
 80010dc:	f001 fc74 	bl	80029c8 <HAL_I2C_Mem_Write>

		// Configure Accelerometer
		data = ACCEL_2; // range = +/- 2g
 80010e0:	2300      	movs	r3, #0
 80010e2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data, 1, 1000);
 80010e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	221c      	movs	r2, #28
 80010f6:	21d0      	movs	r1, #208	@ 0xd0
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <MPU6050_Init+0xa8>)
 80010fa:	f001 fc65 	bl	80029c8 <HAL_I2C_Mem_Write>
	}
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000ac 	.word	0x200000ac

0800110c <MPU6050_ACCEL_READ>:
/* END OF MPU6050 INITIALIZATION */

/* MPU6050 ACCELEROMETERR READ */
void MPU6050_ACCEL_READ()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, data, 6, 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2306      	movs	r3, #6
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	463b      	mov	r3, r7
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	223b      	movs	r2, #59	@ 0x3b
 8001124:	21d0      	movs	r1, #208	@ 0xd0
 8001126:	4828      	ldr	r0, [pc, #160]	@ (80011c8 <MPU6050_ACCEL_READ+0xbc>)
 8001128:	f001 fd48 	bl	8002bbc <HAL_I2C_Mem_Read>

	ax_raw = (int16_t)(data[0] << 8 | data[1]);
 800112c:	783b      	ldrb	r3, [r7, #0]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	787b      	ldrb	r3, [r7, #1]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MPU6050_ACCEL_READ+0xc0>)
 800113c:	801a      	strh	r2, [r3, #0]
	ay_raw = (int16_t)(data[2] << 8 | data[3]);
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <MPU6050_ACCEL_READ+0xc4>)
 800114e:	801a      	strh	r2, [r3, #0]
	az_raw = (int16_t)(data[4] << 8 | data[5]);
 8001150:	793b      	ldrb	r3, [r7, #4]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MPU6050_ACCEL_READ+0xc8>)
 8001160:	801a      	strh	r2, [r3, #0]

	ax = (float)ax_raw/16384.0;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MPU6050_ACCEL_READ+0xc0>)
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fdaf 	bl	8000ccc <__aeabi_i2f>
 800116e:	4603      	mov	r3, r0
 8001170:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff feb1 	bl	8000edc <__aeabi_fdiv>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MPU6050_ACCEL_READ+0xcc>)
 8001180:	601a      	str	r2, [r3, #0]
	ay = (float)ay_raw/16834.0;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MPU6050_ACCEL_READ+0xc4>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fd9f 	bl	8000ccc <__aeabi_i2f>
 800118e:	4603      	mov	r3, r0
 8001190:	4912      	ldr	r1, [pc, #72]	@ (80011dc <MPU6050_ACCEL_READ+0xd0>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fea2 	bl	8000edc <__aeabi_fdiv>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MPU6050_ACCEL_READ+0xd4>)
 800119e:	601a      	str	r2, [r3, #0]
	az = (float)az_raw/16384.0;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MPU6050_ACCEL_READ+0xc8>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fd90 	bl	8000ccc <__aeabi_i2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe92 	bl	8000edc <__aeabi_fdiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MPU6050_ACCEL_READ+0xd8>)
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000ac 	.word	0x200000ac
 80011cc:	20000190 	.word	0x20000190
 80011d0:	20000192 	.word	0x20000192
 80011d4:	20000194 	.word	0x20000194
 80011d8:	20000198 	.word	0x20000198
 80011dc:	46838400 	.word	0x46838400
 80011e0:	2000019c 	.word	0x2000019c
 80011e4:	200001a0 	.word	0x200001a0

080011e8 <MPU6050_GYRO_READ>:
/* END OF ACCELEROMETER READ */


/* GYROSCOPE READ */
void MPU6050_GYRO_READ()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, data, 6, 1000);
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2306      	movs	r3, #6
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	2243      	movs	r2, #67	@ 0x43
 8001200:	21d0      	movs	r1, #208	@ 0xd0
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <MPU6050_GYRO_READ+0xa8>)
 8001204:	f001 fcda 	bl	8002bbc <HAL_I2C_Mem_Read>

	int16_t gx_raw = (int16_t)(data[0] << 8 | data[1]);
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	81fb      	strh	r3, [r7, #14]
	int16_t gy_raw = (int16_t)(data[2] << 8 | data[3]);
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	81bb      	strh	r3, [r7, #12]
	int16_t gz_raw = (int16_t)(data[4] << 8 | data[5]);
 8001224:	7a3b      	ldrb	r3, [r7, #8]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7a7b      	ldrb	r3, [r7, #9]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	817b      	strh	r3, [r7, #10]

	gx = (float)gx_raw/131.0;
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd48 	bl	8000ccc <__aeabi_i2f>
 800123c:	4603      	mov	r3, r0
 800123e:	4915      	ldr	r1, [pc, #84]	@ (8001294 <MPU6050_GYRO_READ+0xac>)
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe4b 	bl	8000edc <__aeabi_fdiv>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <MPU6050_GYRO_READ+0xb0>)
 800124c:	601a      	str	r2, [r3, #0]
	gy = (float)gy_raw/131.0;
 800124e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd3a 	bl	8000ccc <__aeabi_i2f>
 8001258:	4603      	mov	r3, r0
 800125a:	490e      	ldr	r1, [pc, #56]	@ (8001294 <MPU6050_GYRO_READ+0xac>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe3d 	bl	8000edc <__aeabi_fdiv>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <MPU6050_GYRO_READ+0xb4>)
 8001268:	601a      	str	r2, [r3, #0]
	gz = (float)gz_raw/131.0;
 800126a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd2c 	bl	8000ccc <__aeabi_i2f>
 8001274:	4603      	mov	r3, r0
 8001276:	4907      	ldr	r1, [pc, #28]	@ (8001294 <MPU6050_GYRO_READ+0xac>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe2f 	bl	8000edc <__aeabi_fdiv>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MPU6050_GYRO_READ+0xb8>)
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000ac 	.word	0x200000ac
 8001294:	43030000 	.word	0x43030000
 8001298:	200001a4 	.word	0x200001a4
 800129c:	200001a8 	.word	0x200001a8
 80012a0:	200001ac 	.word	0x200001ac

080012a4 <CalGyro>:
/* END OF GYROSCOPE READ */

/* Calibration for MPU6050 */
void CalGyro()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
	int numReadings = 50;
 80012aa:	2332      	movs	r3, #50	@ 0x32
 80012ac:	603b      	str	r3, [r7, #0]
	int16_t Xsum = 0, Ysum = 0, Zsum = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	81fb      	strh	r3, [r7, #14]
 80012b2:	2300      	movs	r3, #0
 80012b4:	81bb      	strh	r3, [r7, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	817b      	strh	r3, [r7, #10]

	for (int i = 0; i < numReadings; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e03d      	b.n	800133c <CalGyro+0x98>
	{
		MPU6050_GYRO_READ();
 80012c0:	f7ff ff92 	bl	80011e8 <MPU6050_GYRO_READ>
		Xsum += gx;
 80012c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fcff 	bl	8000ccc <__aeabi_i2f>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <CalGyro+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4610      	mov	r0, r2
 80012d8:	f7ff fc44 	bl	8000b64 <__addsf3>
 80012dc:	4603      	mov	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fe98 	bl	8001014 <__aeabi_f2iz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	81fb      	strh	r3, [r7, #14]
		Ysum += gy;
 80012e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fced 	bl	8000ccc <__aeabi_i2f>
 80012f2:	4602      	mov	r2, r0
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <CalGyro+0xf0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4610      	mov	r0, r2
 80012fc:	f7ff fc32 	bl	8000b64 <__addsf3>
 8001300:	4603      	mov	r3, r0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe86 	bl	8001014 <__aeabi_f2iz>
 8001308:	4603      	mov	r3, r0
 800130a:	81bb      	strh	r3, [r7, #12]
		Zsum += gz;
 800130c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fcdb 	bl	8000ccc <__aeabi_i2f>
 8001316:	4602      	mov	r2, r0
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <CalGyro+0xf4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f7ff fc20 	bl	8000b64 <__addsf3>
 8001324:	4603      	mov	r3, r0
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe74 	bl	8001014 <__aeabi_f2iz>
 800132c:	4603      	mov	r3, r0
 800132e:	817b      	strh	r3, [r7, #10]
		HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f000 ff37 	bl	80021a4 <HAL_Delay>
	for (int i = 0; i < numReadings; i++)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3301      	adds	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbbd      	blt.n	80012c0 <CalGyro+0x1c>
	}
	gyroXoffset = Xsum/numReadings;
 8001344:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	fb92 f3f3 	sdiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcbc 	bl	8000ccc <__aeabi_i2f>
 8001354:	4603      	mov	r3, r0
 8001356:	4a11      	ldr	r2, [pc, #68]	@ (800139c <CalGyro+0xf8>)
 8001358:	6013      	str	r3, [r2, #0]
	gyroYoffset = Ysum/numReadings;
 800135a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	fb92 f3f3 	sdiv	r3, r2, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fcb1 	bl	8000ccc <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <CalGyro+0xfc>)
 800136e:	6013      	str	r3, [r2, #0]
	gyroZoffset = Zsum/numReadings;
 8001370:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	fb92 f3f3 	sdiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fca6 	bl	8000ccc <__aeabi_i2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <CalGyro+0x100>)
 8001384:	6013      	str	r3, [r2, #0]
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001a4 	.word	0x200001a4
 8001394:	200001a8 	.word	0x200001a8
 8001398:	200001ac 	.word	0x200001ac
 800139c:	200001b8 	.word	0x200001b8
 80013a0:	200001bc 	.word	0x200001bc
 80013a4:	200001c0 	.word	0x200001c0

080013a8 <CalAccel>:
/* END OF GYROSCOPE CALIBRATION */

/* ACCCELAROMETER CLAIBRATION */
void CalAccel()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
	int numReadings = 50;
 80013ae:	2332      	movs	r3, #50	@ 0x32
 80013b0:	603b      	str	r3, [r7, #0]
	int16_t Xsum = 0, Ysum = 0, Zsum = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	2300      	movs	r3, #0
 80013b8:	81bb      	strh	r3, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	817b      	strh	r3, [r7, #10]

	for (int i = 0; i < numReadings; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	e03d      	b.n	8001440 <CalAccel+0x98>
	{
		MPU6050_ACCEL_READ();
 80013c4:	f7ff fea2 	bl	800110c <MPU6050_ACCEL_READ>
		Xsum += ax;
 80013c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fc7d 	bl	8000ccc <__aeabi_i2f>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <CalAccel+0xec>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f7ff fbc2 	bl	8000b64 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe16 	bl	8001014 <__aeabi_f2iz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	81fb      	strh	r3, [r7, #14]
		Ysum += ay;
 80013ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fc6b 	bl	8000ccc <__aeabi_i2f>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <CalAccel+0xf0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f7ff fbb0 	bl	8000b64 <__addsf3>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe04 	bl	8001014 <__aeabi_f2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	81bb      	strh	r3, [r7, #12]
		Zsum += az;
 8001410:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fc59 	bl	8000ccc <__aeabi_i2f>
 800141a:	4602      	mov	r2, r0
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <CalAccel+0xf4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f7ff fb9e 	bl	8000b64 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fdf2 	bl	8001014 <__aeabi_f2iz>
 8001430:	4603      	mov	r3, r0
 8001432:	817b      	strh	r3, [r7, #10]
		HAL_Delay(10);
 8001434:	200a      	movs	r0, #10
 8001436:	f000 feb5 	bl	80021a4 <HAL_Delay>
	for (int i = 0; i < numReadings; i++)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	dbbd      	blt.n	80013c4 <CalAccel+0x1c>
	}
	accelXoffset = Xsum/numReadings;
 8001448:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fc3a 	bl	8000ccc <__aeabi_i2f>
 8001458:	4603      	mov	r3, r0
 800145a:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <CalAccel+0xf8>)
 800145c:	6013      	str	r3, [r2, #0]
	accelYoffset = Ysum/numReadings;
 800145e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	fb92 f3f3 	sdiv	r3, r2, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fc2f 	bl	8000ccc <__aeabi_i2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <CalAccel+0xfc>)
 8001472:	6013      	str	r3, [r2, #0]
	accelZoffset = Zsum/numReadings;
 8001474:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	fb92 f3f3 	sdiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fc24 	bl	8000ccc <__aeabi_i2f>
 8001484:	4603      	mov	r3, r0
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <CalAccel+0x100>)
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000198 	.word	0x20000198
 8001498:	2000019c 	.word	0x2000019c
 800149c:	200001a0 	.word	0x200001a0
 80014a0:	200001c4 	.word	0x200001c4
 80014a4:	200001c8 	.word	0x200001c8
 80014a8:	200001cc 	.word	0x200001cc

080014ac <moveForward>:
/* END OF ACCELEROMETER CLIBRATION */

/* DIRECTIONAL MOTOR CONTROL */
void moveForward(int A, int B)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	 HAL_GPIO_WritePin(ForwardA_GPIO_Port, ForwardA_Pin, A);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <moveForward+0x34>)
 80014c2:	f001 f925 	bl	8002710 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ForwardB_GPIO_Port, ForwardB_Pin, B);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <moveForward+0x34>)
 80014d2:	f001 f91d 	bl	8002710 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <moveBackward>:

void moveBackward(int A, int B)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(BackwardA_GPIO_Port, BackwardA_Pin, A);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <moveBackward+0x34>)
 80014fa:	f001 f909 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BackwardB_GPIO_Port, BackwardB_Pin, B);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <moveBackward+0x34>)
 800150a:	f001 f901 	bl	8002710 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40010c00 	.word	0x40010c00
 800151c:	00000000 	.word	0x00000000

08001520 <HAL_TIM_PeriodElapsedCallback>:
/* END OF MOTOR DIRECTIONAL CONTROL */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM4)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a9e      	ldr	r2, [pc, #632]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 8278 	bne.w	8001a26 <HAL_TIM_PeriodElapsedCallback+0x506>
	{

		  // Accelerometer
		  MPU6050_ACCEL_READ();
 8001536:	f7ff fde9 	bl	800110c <MPU6050_ACCEL_READ>
		  ax -= accelXoffset;
 800153a:	4b9c      	ldr	r3, [pc, #624]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a9c      	ldr	r2, [pc, #624]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb0b 	bl	8000b60 <__aeabi_fsub>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b97      	ldr	r3, [pc, #604]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001550:	601a      	str	r2, [r3, #0]
		  ay -= accelYoffset;
 8001552:	4b98      	ldr	r3, [pc, #608]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a98      	ldr	r2, [pc, #608]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff faff 	bl	8000b60 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b93      	ldr	r3, [pc, #588]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001568:	601a      	str	r2, [r3, #0]
		  az -= accelZoffset;
 800156a:	4b94      	ldr	r3, [pc, #592]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a94      	ldr	r2, [pc, #592]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff faf3 	bl	8000b60 <__aeabi_fsub>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b8f      	ldr	r3, [pc, #572]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001580:	601a      	str	r2, [r3, #0]
		  //a_roll = atan(-ax/sqrt(pow(ay,2) + pow(az,2))) * 180/PI;
		  a_pitch = atan(-ay/sqrt(pow(ax,2) + pow(az,2))) * 180/PI;
 8001582:	4b8c      	ldr	r3, [pc, #560]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff44 	bl	8000418 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b85      	ldr	r3, [pc, #532]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ff3d 	bl	8000418 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a6:	f003 fd0b 	bl	8004fc0 <pow>
 80015aa:	4680      	mov	r8, r0
 80015ac:	4689      	mov	r9, r1
 80015ae:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff30 	bl	8000418 <__aeabi_f2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c0:	f003 fcfe 	bl	8004fc0 <pow>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4640      	mov	r0, r8
 80015ca:	4649      	mov	r1, r9
 80015cc:	f7fe fdc6 	bl	800015c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f003 fd5a 	bl	8005090 <sqrt>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7ff f89a 	bl	800071c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f003 fd72 	bl	80050d8 <atan>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80015fa:	f7fe ff65 	bl	80004c8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a366      	add	r3, pc, #408	@ (adr r3, 80017a0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f886 	bl	800071c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fa4e 	bl	8000ab8 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a6a      	ldr	r2, [pc, #424]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001620:	6013      	str	r3, [r2, #0]
		  // no yaw value due to reliability

		  /* GET TIME FOR GYROSCOPE READINGS AND PID CONTROLLER */
		  last_time = current_time;
 8001622:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6a      	ldr	r2, [pc, #424]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001628:	6013      	str	r3, [r2, #0]
		  current_time = HAL_GetTick();
 800162a:	f000 fdb1 	bl	8002190 <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb47 	bl	8000cc4 <__aeabi_ui2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4a64      	ldr	r2, [pc, #400]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800163a:	6013      	str	r3, [r2, #0]
		  delta_t = (current_time - last_time)/1000; // get it in seconds
 800163c:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a63      	ldr	r2, [pc, #396]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa8a 	bl	8000b60 <__aeabi_fsub>
 800164c:	4603      	mov	r3, r0
 800164e:	4961      	ldr	r1, [pc, #388]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc43 	bl	8000edc <__aeabi_fdiv>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800165c:	601a      	str	r2, [r3, #0]
		  /* END GET TIME */

		  // Gyroscope
		  MPU6050_GYRO_READ();
 800165e:	f7ff fdc3 	bl	80011e8 <MPU6050_GYRO_READ>
		  gx -= gyroXoffset;
 8001662:	4b5e      	ldr	r3, [pc, #376]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a5e      	ldr	r2, [pc, #376]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fa77 	bl	8000b60 <__aeabi_fsub>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b59      	ldr	r3, [pc, #356]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001678:	601a      	str	r2, [r3, #0]
		  //gy -= gyroYoffset;
		  //gz -= gyroZoffset;
		  //g_roll += gy*delta_t;
		  g_pitch += gx*delta_t;
 800167a:	4b58      	ldr	r3, [pc, #352]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a56      	ldr	r2, [pc, #344]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb75 	bl	8000d74 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b55      	ldr	r3, [pc, #340]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff fa65 	bl	8000b64 <__addsf3>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b51      	ldr	r3, [pc, #324]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80016a0:	601a      	str	r2, [r3, #0]

		  /* ANGLES CALCULATION */

		  // filter
		  //roll = alpha*(gy*delta_t + roll) + (1-alpha)*a_roll;
		  pitch = alpha*(gx*delta_t + pitch) + (1-alpha)*a_pitch;
 80016a2:	4b51      	ldr	r3, [pc, #324]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe feb6 	bl	8000418 <__aeabi_f2d>
 80016ac:	4604      	mov	r4, r0
 80016ae:	460d      	mov	r5, r1
 80016b0:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a48      	ldr	r2, [pc, #288]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb5a 	bl	8000d74 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fea8 	bl	8000418 <__aeabi_f2d>
 80016c8:	4b48      	ldr	r3, [pc, #288]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fd45 	bl	800015c <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fef5 	bl	80004c8 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4614      	mov	r4, r2
 80016e4:	461d      	mov	r5, r3
 80016e6:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80016f0:	f7ff fa36 	bl	8000b60 <__aeabi_fsub>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b33      	ldr	r3, [pc, #204]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff fb38 	bl	8000d74 <__aeabi_fmul>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fe86 	bl	8000418 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe fd22 	bl	800015c <__adddf3>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4933      	ldr	r1, [pc, #204]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800171e:	e9c1 2300 	strd	r2, r3, [r1]

		  /* END OF ANGLES CALCULATIONS */

		  /* PID IMPLEMENTATIONS */

		  error = SetPoint - pitch;
 8001722:	2301      	movs	r3, #1
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe65 	bl	80003f4 <__aeabi_i2d>
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe fd12 	bl	8000158 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	492d      	ldr	r1, [pc, #180]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800173a:	e9c1 2300 	strd	r2, r3, [r1]
		  integral += error/dt; // product of error and sampling frequency
 800173e:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001740:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001744:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe53 	bl	80003f4 <__aeabi_i2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ffe1 	bl	800071c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe fcf8 	bl	800015c <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4921      	ldr	r1, [pc, #132]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001772:	e9c1 2300 	strd	r2, r3, [r1]
		  // Prevent Anti-Winndup (max rpm of motors)
		  if (integral > 80)
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001782:	f7ff f931 	bl	80009e8 <__aeabi_dcmpgt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d039      	beq.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x2e0>
			  integral = 80;
 800178c:	491a      	ldr	r1, [pc, #104]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001794:	e9c1 2300 	strd	r2, r3, [r1]
 8001798:	e043      	b.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x302>
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	54442eea 	.word	0x54442eea
 80017a4:	400921fb 	.word	0x400921fb
 80017a8:	40000800 	.word	0x40000800
 80017ac:	20000198 	.word	0x20000198
 80017b0:	200001c4 	.word	0x200001c4
 80017b4:	2000019c 	.word	0x2000019c
 80017b8:	200001c8 	.word	0x200001c8
 80017bc:	200001a0 	.word	0x200001a0
 80017c0:	200001cc 	.word	0x200001cc
 80017c4:	40668000 	.word	0x40668000
 80017c8:	200001b0 	.word	0x200001b0
 80017cc:	20000200 	.word	0x20000200
 80017d0:	20000208 	.word	0x20000208
 80017d4:	447a0000 	.word	0x447a0000
 80017d8:	20000204 	.word	0x20000204
 80017dc:	200001a4 	.word	0x200001a4
 80017e0:	200001b8 	.word	0x200001b8
 80017e4:	200001b4 	.word	0x200001b4
 80017e8:	20000000 	.word	0x20000000
 80017ec:	200001d0 	.word	0x200001d0
 80017f0:	200001e8 	.word	0x200001e8
 80017f4:	20000020 	.word	0x20000020
 80017f8:	200001f0 	.word	0x200001f0
 80017fc:	40540000 	.word	0x40540000
		  else if(integral < -80)
 8001800:	4b8d      	ldr	r3, [pc, #564]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800180c:	f7ff f8ce 	bl	80009ac <__aeabi_dcmplt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x302>
			  integral = -80;
 8001816:	4988      	ldr	r1, [pc, #544]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b87      	ldr	r3, [pc, #540]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800181e:	e9c1 2300 	strd	r2, r3, [r1]

		  derivative = (error - LastError)*dt; // division of change in error and sampling frequency
 8001822:	4b87      	ldr	r3, [pc, #540]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001828:	4b86      	ldr	r3, [pc, #536]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fc93 	bl	8000158 <__aeabi_dsub>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x528>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fdd8 	bl	80003f4 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fe3c 	bl	80004c8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	497d      	ldr	r1, [pc, #500]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001856:	e9c1 2300 	strd	r2, r3, [r1]

		  output = Kp*error + Ki*integral + Kd*derivative;
 800185a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800185c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001860:	4b77      	ldr	r3, [pc, #476]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe fe2f 	bl	80004c8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	4b78      	ldr	r3, [pc, #480]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fe23 	bl	80004c8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fc67 	bl	800015c <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4614      	mov	r4, r2
 8001894:	461d      	mov	r5, r3
 8001896:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fe11 	bl	80004c8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fc55 	bl	800015c <__adddf3>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4969      	ldr	r1, [pc, #420]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]

		  LastError = error;
 80018bc:	4b60      	ldr	r3, [pc, #384]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	4960      	ldr	r1, [pc, #384]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]

		  if (output > 80)
 80018c8:	4b64      	ldr	r3, [pc, #400]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80018ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80018d4:	f7ff f888 	bl	80009e8 <__aeabi_dcmpgt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_TIM_PeriodElapsedCallback+0x3cc>
			  output = 80;
 80018de:	495f      	ldr	r1, [pc, #380]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
 80018ea:	e010      	b.n	800190e <HAL_TIM_PeriodElapsedCallback+0x3ee>
		  else if (output < -80)
 80018ec:	4b5b      	ldr	r3, [pc, #364]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b51      	ldr	r3, [pc, #324]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80018f8:	f7ff f858 	bl	80009ac <__aeabi_dcmplt>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_TIM_PeriodElapsedCallback+0x3ee>
			  output = -80;
 8001902:	4956      	ldr	r1, [pc, #344]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
		  /* END OF PID IMPLEMENTATION */

		  /* PWM CONDITION SETUP */

		  // if the error (roll angle) is positive move the motors forward
		  if (error < 0)
 800190e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f7ff f846 	bl	80009ac <__aeabi_dcmplt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d040      	beq.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0x488>
		  {
			  // Move motors forward with a speed relative to output value
			  moveForward(1,1);
 8001926:	2101      	movs	r1, #1
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff fdbf 	bl	80014ac <moveForward>
			  moveBackward(0,0);
 800192e:	2100      	movs	r1, #0
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff fdd7 	bl	80014e4 <moveBackward>
			  //Update PWM
			  TIM1 -> CCR1 = abs(output)*0.9;
 8001936:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f872 	bl	8000a28 <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	bfb8      	it	lt
 800194a:	425b      	neglt	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd51 	bl	80003f4 <__aeabi_i2d>
 8001952:	a337      	add	r3, pc, #220	@ (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fdb6 	bl	80004c8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4c40      	ldr	r4, [pc, #256]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f887 	bl	8000a78 <__aeabi_d2uiz>
 800196a:	4603      	mov	r3, r0
 800196c:	6363      	str	r3, [r4, #52]	@ 0x34
			  TIM1 -> CCR4 = abs(output)*0.9;
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f856 	bl	8000a28 <__aeabi_d2iz>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bfb8      	it	lt
 8001982:	425b      	neglt	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd35 	bl	80003f4 <__aeabi_i2d>
 800198a:	a329      	add	r3, pc, #164	@ (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fd9a 	bl	80004c8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4c32      	ldr	r4, [pc, #200]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f86b 	bl	8000a78 <__aeabi_d2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	6423      	str	r3, [r4, #64]	@ 0x40
			  TIM1 -> CCR1 = 0;
			  TIM1 -> CCR4 = 0;
		  }
		  /* END OF CONDIITON SETUP */
	}
}
 80019a6:	e03e      	b.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x506>
		  else if (error > 0)
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80019aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f7ff f817 	bl	80009e8 <__aeabi_dcmpgt>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d024      	beq.n	8001a0a <HAL_TIM_PeriodElapsedCallback+0x4ea>
			  moveForward(0,0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fd72 	bl	80014ac <moveForward>
			  moveBackward(1,1);
 80019c8:	2101      	movs	r1, #1
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff fd8a 	bl	80014e4 <moveBackward>
			  TIM1 -> CCR1 = abs(output);
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f825 	bl	8000a28 <__aeabi_d2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80019ea:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM1 -> CCR4 = abs(output);
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f817 	bl	8000a28 <__aeabi_d2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a00:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a04:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a08:	e00d      	b.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x506>
			  moveForward(1,1);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fd4d 	bl	80014ac <moveForward>
			  moveBackward(1,1);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fd65 	bl	80014e4 <moveBackward>
			  TIM1 -> CCR1 = 0;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM1 -> CCR4 = 0;
 8001a20:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	3feccccc 	.word	0x3feccccc
 8001a38:	200001f0 	.word	0x200001f0
 8001a3c:	c0540000 	.word	0xc0540000
 8001a40:	200001e8 	.word	0x200001e8
 8001a44:	200001e0 	.word	0x200001e0
 8001a48:	20000020 	.word	0x20000020
 8001a4c:	200001f8 	.word	0x200001f8
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000010 	.word	0x20000010
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	200001d8 	.word	0x200001d8
 8001a60:	40540000 	.word	0x40540000
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6c:	f000 fb38 	bl	80020e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a70:	f000 f824 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a74:	f000 f990 	bl	8001d98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a78:	f000 f866 	bl	8001b48 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a7c:	f000 f892 	bl	8001ba4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a80:	f000 f93c 	bl	8001cfc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM Channels
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a84:	2100      	movs	r1, #0
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <main+0x4c>)
 8001a88:	f002 fbb6 	bl	80041f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a8c:	210c      	movs	r1, #12
 8001a8e:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <main+0x4c>)
 8001a90:	f002 fbb2 	bl	80041f8 <HAL_TIM_PWM_Start>

  // Start MPU6050
  MPU6050_Init();
 8001a94:	f7ff fae4 	bl	8001060 <MPU6050_Init>
  HAL_Delay(1000);
 8001a98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a9c:	f000 fb82 	bl	80021a4 <HAL_Delay>
  CalGyro(); // Calibrat Gyroscope for accurate reading
 8001aa0:	f7ff fc00 	bl	80012a4 <CalGyro>
  CalAccel(); // Calibrate accelerometer for accurate reading
 8001aa4:	f7ff fc80 	bl	80013a8 <CalAccel>

  // Start TIM4 interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <main+0x50>)
 8001aaa:	f002 fafb 	bl	80040a4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aae:	bf00      	nop
 8001ab0:	e7fd      	b.n	8001aae <main+0x46>
 8001ab2:	bf00      	nop
 8001ab4:	20000100 	.word	0x20000100
 8001ab8:	20000148 	.word	0x20000148

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	@ 0x40
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0318 	add.w	r3, r7, #24
 8001ac6:	2228      	movs	r2, #40	@ 0x28
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fa45 	bl	8004f5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ae6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af0:	2302      	movs	r3, #2
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001afa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fe81 	bl	800380c <HAL_RCC_OscConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b10:	f000 f98e 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b14:	230f      	movs	r3, #15
 8001b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 f8ee 	bl	8003d10 <HAL_RCC_ClockConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b3a:	f000 f979 	bl	8001e30 <Error_Handler>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3740      	adds	r7, #64	@ 0x40
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	@ (8001b9c <MX_I2C1_Init+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b54:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <MX_I2C1_Init+0x58>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <MX_I2C1_Init+0x50>)
 8001b86:	f000 fddb 	bl	8002740 <HAL_I2C_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b90:	f000 f94e 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200000ac 	.word	0x200000ac
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	00061a80 	.word	0x00061a80

08001ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b096      	sub	sp, #88	@ 0x58
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2220      	movs	r2, #32
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 f9bc 	bl	8004f5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be2:	4b44      	ldr	r3, [pc, #272]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001be4:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <MX_TIM1_Init+0x154>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8001be8:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001bea:	2208      	movs	r2, #8
 8001bec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001bf6:	2263      	movs	r2, #99	@ 0x63
 8001bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c00:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c0c:	4839      	ldr	r0, [pc, #228]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c0e:	f002 f9f9 	bl	8004004 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c18:	f000 f90a 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c26:	4619      	mov	r1, r3
 8001c28:	4832      	ldr	r0, [pc, #200]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c2a:	f002 fd39 	bl	80046a0 <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c34:	f000 f8fc 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c38:	482e      	ldr	r0, [pc, #184]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c3a:	f002 fa85 	bl	8004148 <HAL_TIM_PWM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c44:	f000 f8f4 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c54:	4619      	mov	r1, r3
 8001c56:	4827      	ldr	r0, [pc, #156]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c58:	f003 f8be 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c62:	f000 f8e5 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	@ 0x60
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c86:	2200      	movs	r2, #0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	481a      	ldr	r0, [pc, #104]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001c8c:	f002 fc46 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c96:	f000 f8cb 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4814      	ldr	r0, [pc, #80]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001ca4:	f002 fc3a 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001cae:	f000 f8bf 	bl	8001e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001cd6:	f003 f8dd 	bl	8004e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001ce0:	f000 f8a6 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ce4:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <MX_TIM1_Init+0x150>)
 8001ce6:	f000 f965 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001cea:	bf00      	nop
 8001cec:	3758      	adds	r7, #88	@ 0x58
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000100 	.word	0x20000100
 8001cf8:	40012c00 	.word	0x40012c00

08001cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	463b      	mov	r3, r7
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <MX_TIM4_Init+0x98>)
 8001d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d20:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001d24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d2e:	2231      	movs	r2, #49	@ 0x31
 8001d30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d3e:	4814      	ldr	r0, [pc, #80]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d40:	f002 f960 	bl	8004004 <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d4a:	f000 f871 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d5c:	f002 fca0 	bl	80046a0 <HAL_TIM_ConfigClockSource>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d66:	f000 f863 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d72:	463b      	mov	r3, r7
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <MX_TIM4_Init+0x94>)
 8001d78:	f003 f82e 	bl	8004dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d82:	f000 f855 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000148 	.word	0x20000148
 8001d94:	40000800 	.word	0x40000800

08001d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <MX_GPIO_Init+0x90>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BackwardB_Pin|ForwardB_Pin|ForwardA_Pin|BackwardA_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001dfa:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_GPIO_Init+0x94>)
 8001dfc:	f000 fc88 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BackwardB_Pin ForwardB_Pin ForwardA_Pin BackwardA_Pin */
  GPIO_InitStruct.Pin = BackwardB_Pin|ForwardB_Pin|ForwardA_Pin|BackwardA_Pin;
 8001e00:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	4619      	mov	r1, r3
 8001e18:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <MX_GPIO_Init+0x94>)
 8001e1a:	f000 faf5 	bl	8002408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e1e:	bf00      	nop
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010c00 	.word	0x40010c00

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <Error_Handler+0x8>

08001e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6193      	str	r3, [r2, #24]
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_MspInit+0x5c>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_MspInit+0x60>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_MspInit+0x60>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <HAL_I2C_MspInit+0x90>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d132      	bne.n	8001f26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	@ (8001f38 <HAL_I2C_MspInit+0x98>)
 8001eee:	f000 fa8b 	bl	8002408 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f08:	4a0c      	ldr	r2, [pc, #48]	@ (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	@ 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40010000 	.word	0x40010000

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x68>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10c      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f6a:	e018      	b.n	8001f9e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x70>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d113      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_TIM_Base_MspInit+0x6c>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	201e      	movs	r0, #30
 8001f94:	f000 fa01 	bl	800239a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f98:	201e      	movs	r0, #30
 8001f9a:	f000 fa1a 	bl	80023d2 <HAL_NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40000800 	.word	0x40000800

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <HAL_TIM_MspPostInit+0x5c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d118      	bne.n	8002006 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_TIM_MspPostInit+0x60>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <HAL_TIM_MspPostInit+0x60>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_TIM_MspPostInit+0x60>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001fec:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <HAL_TIM_MspPostInit+0x64>)
 8002002:	f000 fa01 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40010800 	.word	0x40010800

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 f87e 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <TIM4_IRQHandler+0x10>)
 800207a:	f002 f95f 	bl	800433c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000148 	.word	0x20000148

08002088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002094:	f7ff fff8 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480b      	ldr	r0, [pc, #44]	@ (80020c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800209a:	490c      	ldr	r1, [pc, #48]	@ (80020cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800209c:	4a0c      	ldr	r2, [pc, #48]	@ (80020d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a09      	ldr	r2, [pc, #36]	@ (80020d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020b0:	4c09      	ldr	r4, [pc, #36]	@ (80020d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020be:	f002 ff5b 	bl	8004f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c2:	f7ff fcd1 	bl	8001a68 <main>
  bx lr
 80020c6:	4770      	bx	lr
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80020d0:	08006208 	.word	0x08006208
  ldr r2, =_sbss
 80020d4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80020d8:	20000348 	.word	0x20000348

080020dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_2_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <HAL_Init+0x28>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <HAL_Init+0x28>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 f947 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fe9e 	bl	8001e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f95f 	bl	80023ee <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 f927 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	@ (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000024 	.word	0x20000024
 8002164:	2000002c 	.word	0x2000002c
 8002168:	20000028 	.word	0x20000028

0800216c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_IncTick+0x1c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_IncTick+0x20>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a03      	ldr	r2, [pc, #12]	@ (800218c <HAL_IncTick+0x20>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	2000002c 	.word	0x2000002c
 800218c:	2000020c 	.word	0x2000020c

08002190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b02      	ldr	r3, [pc, #8]	@ (80021a0 <HAL_GetTick+0x10>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	2000020c 	.word	0x2000020c

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff fff0 	bl	8002190 <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffe0 	bl	8002190 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000002c 	.word	0x2000002c

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4906      	ldr	r1, [pc, #24]	@ (8002284 <__NVIC_EnableIRQ+0x34>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	@ (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	@ 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff90 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff2d 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff42 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff90 	bl	80022dc <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5f 	bl	8002288 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff35 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffa2 	bl	8002340 <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	@ 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e169      	b.n	80026f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800241c:	2201      	movs	r2, #1
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	f040 8158 	bne.w	80026ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a9a      	ldr	r2, [pc, #616]	@ (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d05e      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002444:	4a98      	ldr	r2, [pc, #608]	@ (80026a8 <HAL_GPIO_Init+0x2a0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d875      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800244a:	4a98      	ldr	r2, [pc, #608]	@ (80026ac <HAL_GPIO_Init+0x2a4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d058      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002450:	4a96      	ldr	r2, [pc, #600]	@ (80026ac <HAL_GPIO_Init+0x2a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d86f      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002456:	4a96      	ldr	r2, [pc, #600]	@ (80026b0 <HAL_GPIO_Init+0x2a8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d052      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 800245c:	4a94      	ldr	r2, [pc, #592]	@ (80026b0 <HAL_GPIO_Init+0x2a8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d869      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002462:	4a94      	ldr	r2, [pc, #592]	@ (80026b4 <HAL_GPIO_Init+0x2ac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04c      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002468:	4a92      	ldr	r2, [pc, #584]	@ (80026b4 <HAL_GPIO_Init+0x2ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d863      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800246e:	4a92      	ldr	r2, [pc, #584]	@ (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d046      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
 8002474:	4a90      	ldr	r2, [pc, #576]	@ (80026b8 <HAL_GPIO_Init+0x2b0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d85d      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 800247a:	2b12      	cmp	r3, #18
 800247c:	d82a      	bhi.n	80024d4 <HAL_GPIO_Init+0xcc>
 800247e:	2b12      	cmp	r3, #18
 8002480:	d859      	bhi.n	8002536 <HAL_GPIO_Init+0x12e>
 8002482:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <HAL_GPIO_Init+0x80>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002503 	.word	0x08002503
 800248c:	080024dd 	.word	0x080024dd
 8002490:	080024ef 	.word	0x080024ef
 8002494:	08002531 	.word	0x08002531
 8002498:	08002537 	.word	0x08002537
 800249c:	08002537 	.word	0x08002537
 80024a0:	08002537 	.word	0x08002537
 80024a4:	08002537 	.word	0x08002537
 80024a8:	08002537 	.word	0x08002537
 80024ac:	08002537 	.word	0x08002537
 80024b0:	08002537 	.word	0x08002537
 80024b4:	08002537 	.word	0x08002537
 80024b8:	08002537 	.word	0x08002537
 80024bc:	08002537 	.word	0x08002537
 80024c0:	08002537 	.word	0x08002537
 80024c4:	08002537 	.word	0x08002537
 80024c8:	08002537 	.word	0x08002537
 80024cc:	080024e5 	.word	0x080024e5
 80024d0:	080024f9 	.word	0x080024f9
 80024d4:	4a79      	ldr	r2, [pc, #484]	@ (80026bc <HAL_GPIO_Init+0x2b4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024da:	e02c      	b.n	8002536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e029      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	3304      	adds	r3, #4
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e024      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	3308      	adds	r3, #8
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e01f      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	330c      	adds	r3, #12
 80024fe:	623b      	str	r3, [r7, #32]
          break;
 8002500:	e01a      	b.n	8002538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800250a:	2304      	movs	r3, #4
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e013      	b.n	8002538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002518:	2308      	movs	r3, #8
 800251a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	611a      	str	r2, [r3, #16]
          break;
 8002522:	e009      	b.n	8002538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002524:	2308      	movs	r3, #8
 8002526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	615a      	str	r2, [r3, #20]
          break;
 800252e:	e003      	b.n	8002538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x130>
          break;
 8002536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2bff      	cmp	r3, #255	@ 0xff
 800253c:	d801      	bhi.n	8002542 <HAL_GPIO_Init+0x13a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	e001      	b.n	8002546 <HAL_GPIO_Init+0x13e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2bff      	cmp	r3, #255	@ 0xff
 800254c:	d802      	bhi.n	8002554 <HAL_GPIO_Init+0x14c>
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x152>
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	3b08      	subs	r3, #8
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	210f      	movs	r1, #15
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	401a      	ands	r2, r3
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80b1 	beq.w	80026ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002588:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a4c      	ldr	r2, [pc, #304]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_GPIO_Init+0x2b8>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a0:	4a48      	ldr	r2, [pc, #288]	@ (80026c4 <HAL_GPIO_Init+0x2bc>)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a40      	ldr	r2, [pc, #256]	@ (80026c8 <HAL_GPIO_Init+0x2c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_GPIO_Init+0x1ec>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <HAL_GPIO_Init+0x2c4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1e8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3e      	ldr	r2, [pc, #248]	@ (80026d0 <HAL_GPIO_Init+0x2c8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1e4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	@ (80026d4 <HAL_GPIO_Init+0x2cc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1e0>
 80025e4:	2303      	movs	r3, #3
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e004      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_Init+0x1ee>
 80025f4:	2300      	movs	r3, #0
 80025f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	4093      	lsls	r3, r2
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002606:	492f      	ldr	r1, [pc, #188]	@ (80026c4 <HAL_GPIO_Init+0x2bc>)
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002620:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	492c      	ldr	r1, [pc, #176]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800262e:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	43db      	mvns	r3, r3
 8002636:	4928      	ldr	r1, [pc, #160]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002638:	4013      	ands	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002648:	4b23      	ldr	r3, [pc, #140]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4922      	ldr	r1, [pc, #136]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	43db      	mvns	r3, r3
 800265e:	491e      	ldr	r1, [pc, #120]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002660:	4013      	ands	r3, r2
 8002662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4918      	ldr	r1, [pc, #96]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4914      	ldr	r1, [pc, #80]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d021      	beq.n	80026dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002698:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	490e      	ldr	r1, [pc, #56]	@ (80026d8 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
 80026a4:	e021      	b.n	80026ea <HAL_GPIO_Init+0x2e2>
 80026a6:	bf00      	nop
 80026a8:	10320000 	.word	0x10320000
 80026ac:	10310000 	.word	0x10310000
 80026b0:	10220000 	.word	0x10220000
 80026b4:	10210000 	.word	0x10210000
 80026b8:	10120000 	.word	0x10120000
 80026bc:	10110000 	.word	0x10110000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40010c00 	.word	0x40010c00
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	4909      	ldr	r1, [pc, #36]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	3301      	adds	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f47f ae8e 	bne.w	800241c <HAL_GPIO_Init+0x14>
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	372c      	adds	r7, #44	@ 0x2c
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e12b      	b.n	80029aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fb9a 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	@ 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 fbfc 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 80027a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a81      	ldr	r2, [pc, #516]	@ (80029b4 <HAL_I2C_Init+0x274>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d807      	bhi.n	80027c4 <HAL_I2C_Init+0x84>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a80      	ldr	r2, [pc, #512]	@ (80029b8 <HAL_I2C_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bf94      	ite	ls
 80027bc:	2301      	movls	r3, #1
 80027be:	2300      	movhi	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e006      	b.n	80027d2 <HAL_I2C_Init+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	@ (80029bc <HAL_I2C_Init+0x27c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e0e7      	b.n	80029aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a78      	ldr	r2, [pc, #480]	@ (80029c0 <HAL_I2C_Init+0x280>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a6a      	ldr	r2, [pc, #424]	@ (80029b4 <HAL_I2C_Init+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d802      	bhi.n	8002814 <HAL_I2C_Init+0xd4>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	e009      	b.n	8002828 <HAL_I2C_Init+0xe8>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a69      	ldr	r2, [pc, #420]	@ (80029c4 <HAL_I2C_Init+0x284>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800283a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	495c      	ldr	r1, [pc, #368]	@ (80029b4 <HAL_I2C_Init+0x274>)
 8002844:	428b      	cmp	r3, r1
 8002846:	d819      	bhi.n	800287c <HAL_I2C_Init+0x13c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e59      	subs	r1, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800285c:	400b      	ands	r3, r1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_I2C_Init+0x138>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	e051      	b.n	800291c <HAL_I2C_Init+0x1dc>
 8002878:	2304      	movs	r3, #4
 800287a:	e04f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d111      	bne.n	80028a8 <HAL_I2C_Init+0x168>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e012      	b.n	80028ce <HAL_I2C_Init+0x18e>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	0099      	lsls	r1, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Init+0x196>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e022      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10e      	bne.n	80028fc <HAL_I2C_Init+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e58      	subs	r0, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	440b      	add	r3, r1
 80028ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Init+0x1dc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800294a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6911      	ldr	r1, [r2, #16]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	4311      	orrs	r1, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	000186a0 	.word	0x000186a0
 80029b8:	001e847f 	.word	0x001e847f
 80029bc:	003d08ff 	.word	0x003d08ff
 80029c0:	431bde83 	.word	0x431bde83
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e2:	f7ff fbd5 	bl	8002190 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80d9 	bne.w	8002ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2319      	movs	r3, #25
 80029fc:	2201      	movs	r2, #1
 80029fe:	496d      	ldr	r1, [pc, #436]	@ (8002bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fccd 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0cc      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_Mem_Write+0x56>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0c5      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2221      	movs	r2, #33	@ 0x21
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a3a      	ldr	r2, [r7, #32]
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a86:	88f8      	ldrh	r0, [r7, #6]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	8979      	ldrh	r1, [r7, #10]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4603      	mov	r3, r0
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fb04 	bl	80030a4 <I2C_RequestMemoryWrite>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d052      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e081      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fd92 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06b      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_I2C_Mem_Write+0x180>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1aa      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fd85 	bl	8003664 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e016      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	00100002 	.word	0x00100002
 8002bb8:	ffff0000 	.word	0xffff0000

08002bbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	@ 0x30
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	817b      	strh	r3, [r7, #10]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	813b      	strh	r3, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bda:	f7ff fad9 	bl	8002190 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	f040 8250 	bne.w	800308e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4982      	ldr	r1, [pc, #520]	@ (8002e00 <HAL_I2C_Mem_Read+0x244>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fbd1 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	e243      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x5a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e23c      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2222      	movs	r2, #34	@ 0x22
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a62      	ldr	r2, [pc, #392]	@ (8002e04 <HAL_I2C_Mem_Read+0x248>)
 8002c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c7e:	88f8      	ldrh	r0, [r7, #6]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	8979      	ldrh	r1, [r7, #10]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa9e 	bl	80031d0 <I2C_RequestMemoryRead>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1f8      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e1cc      	b.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d11e      	bne.n	8002d14 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce6:	b672      	cpsid	i
}
 8002ce8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d10:	b662      	cpsie	i
}
 8002d12:	e035      	b.n	8002d80 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d11e      	bne.n	8002d5a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
}
 8002d2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d56:	b662      	cpsie	i
}
 8002d58:	e012      	b.n	8002d80 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d68:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d80:	e172      	b.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	f200 811f 	bhi.w	8002fca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d123      	bne.n	8002ddc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fcab 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e173      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dda:	e145      	b.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d152      	bne.n	8002e8a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dea:	2200      	movs	r2, #0
 8002dec:	4906      	ldr	r1, [pc, #24]	@ (8002e08 <HAL_I2C_Mem_Read+0x24c>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fad6 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e148      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
}
 8002e0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e52:	b662      	cpsie	i
}
 8002e54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e88:	e0ee      	b.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	2200      	movs	r2, #0
 8002e92:	4981      	ldr	r1, [pc, #516]	@ (8003098 <HAL_I2C_Mem_Read+0x4dc>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fa83 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0f5      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eea:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_I2C_Mem_Read+0x4e0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80030a0 <HAL_I2C_Mem_Read+0x4e4>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0a1a      	lsrs	r2, r3, #8
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00da      	lsls	r2, r3, #3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d118      	bne.n	8002f42 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f32:	b662      	cpsie	i
}
 8002f34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0a6      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d1d9      	bne.n	8002f04 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f92:	b662      	cpsie	i
}
 8002f94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fc8:	e04e      	b.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fb90 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e058      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d124      	bne.n	8003068 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003034:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f ae88 	bne.w	8002d82 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3728      	adds	r7, #40	@ 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	00010004 	.word	0x00010004
 800309c:	20000024 	.word	0x20000024
 80030a0:	14f8b589 	.word	0x14f8b589

080030a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f960 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f4:	d103      	bne.n	80030fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e05f      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	492d      	ldr	r1, [pc, #180]	@ (80031cc <I2C_RequestMemoryWrite+0x128>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f9bb 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e04c      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fa46 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	2b04      	cmp	r3, #4
 8003154:	d107      	bne.n	8003166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02b      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	e021      	b.n	80031c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	6a39      	ldr	r1, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa20 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d107      	bne.n	80031b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e005      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	00010002 	.word	0x00010002

080031d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2200      	movs	r2, #0
 8003212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8c2 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003230:	d103      	bne.n	800323a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0aa      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800324c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	4952      	ldr	r1, [pc, #328]	@ (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f91d 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e097      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f9a8 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e076      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e021      	b.n	80032fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f982 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e050      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f967 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e035      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2200      	movs	r2, #0
 8003340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f82b 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800335e:	d103      	bne.n	8003368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e013      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	4906      	ldr	r1, [pc, #24]	@ (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010002 	.word	0x00010002

080033a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	e048      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d044      	beq.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fee9 	bl	8002190 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d139      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e023      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0xca>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	e00c      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d093      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a2:	e071      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d123      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e067      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d041      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fe44 	bl	8002190 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d136      	bne.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e021      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10c      	bne.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e00b      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af6d 	bne.w	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	e034      	b.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f8e3 	bl	80037ae <I2C_IsAcknowledgeFailed>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e034      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d028      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fdc9 	bl	8002190 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d016      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d1c3      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003670:	e034      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f89b 	bl	80037ae <I2C_IsAcknowledgeFailed>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e034      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d028      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe fd81 	bl	8002190 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d016      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d1c3      	bne.n	8003672 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003700:	e049      	b.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d119      	bne.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e030      	b.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fd24 	bl	8002190 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11d      	bne.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	d016      	beq.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d1ae      	bne.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d11b      	bne.n	80037fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
	...

0800380c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e272      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8087 	beq.w	800393a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800382c:	4b92      	ldr	r3, [pc, #584]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	d00c      	beq.n	8003852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003838:	4b8f      	ldr	r3, [pc, #572]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b08      	cmp	r3, #8
 8003842:	d112      	bne.n	800386a <HAL_RCC_OscConfig+0x5e>
 8003844:	4b8c      	ldr	r3, [pc, #560]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d10b      	bne.n	800386a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003852:	4b89      	ldr	r3, [pc, #548]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d06c      	beq.n	8003938 <HAL_RCC_OscConfig+0x12c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d168      	bne.n	8003938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e24c      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x76>
 8003874:	4b80      	ldr	r3, [pc, #512]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a7f      	ldr	r2, [pc, #508]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800387a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	e02e      	b.n	80038e0 <HAL_RCC_OscConfig+0xd4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7a      	ldr	r2, [pc, #488]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b78      	ldr	r3, [pc, #480]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a77      	ldr	r2, [pc, #476]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xd4>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0xbc>
 80038ae:	4b72      	ldr	r3, [pc, #456]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a71      	ldr	r2, [pc, #452]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6e      	ldr	r2, [pc, #440]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xd4>
 80038c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b68      	ldr	r3, [pc, #416]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a67      	ldr	r2, [pc, #412]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe fc52 	bl	8002190 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fc4e 	bl	8002190 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e200      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b5d      	ldr	r3, [pc, #372]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe4>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fc3e 	bl	8002190 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fc3a 	bl	8002190 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1ec      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b53      	ldr	r3, [pc, #332]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x10c>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003946:	4b4c      	ldr	r3, [pc, #304]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003952:	4b49      	ldr	r3, [pc, #292]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x18c>
 800395e:	4b46      	ldr	r3, [pc, #280]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b43      	ldr	r3, [pc, #268]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x176>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1c0      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4939      	ldr	r1, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <HAL_RCC_OscConfig+0x270>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe fbf3 	bl	8002190 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fe fbef 	bl	8002190 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1a1      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4927      	ldr	r1, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <HAL_RCC_OscConfig+0x270>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fbd2 	bl	8002190 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fe fbce 	bl	8002190 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e180      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03a      	beq.n	8003a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d019      	beq.n	8003a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a28:	f7fe fbb2 	bl	8002190 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe fbae 	bl	8002190 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e160      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f000 faba 	bl	8003fc8 <RCC_Delay>
 8003a54:	e01c      	b.n	8003a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a56:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fb98 	bl	8002190 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a62:	e00f      	b.n	8003a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fe fb94 	bl	8002190 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d908      	bls.n	8003a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e146      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	42420000 	.word	0x42420000
 8003a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a84:	4b92      	ldr	r3, [pc, #584]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e9      	bne.n	8003a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a6 	beq.w	8003bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10d      	bne.n	8003aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b88      	ldr	r3, [pc, #544]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4a87      	ldr	r2, [pc, #540]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab8:	61d3      	str	r3, [r2, #28]
 8003aba:	4b85      	ldr	r3, [pc, #532]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b82      	ldr	r3, [pc, #520]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7e      	ldr	r2, [pc, #504]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fb55 	bl	8002190 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe fb51 	bl	8002190 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	@ 0x64
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e103      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b75      	ldr	r3, [pc, #468]	@ (8003cd4 <HAL_RCC_OscConfig+0x4c8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x312>
 8003b10:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	e02d      	b.n	8003b7a <HAL_RCC_OscConfig+0x36e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x334>
 8003b26:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a69      	ldr	r2, [pc, #420]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6213      	str	r3, [r2, #32]
 8003b32:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a66      	ldr	r2, [pc, #408]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6213      	str	r3, [r2, #32]
 8003b3e:	e01c      	b.n	8003b7a <HAL_RCC_OscConfig+0x36e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x356>
 8003b48:	4b61      	ldr	r3, [pc, #388]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4a60      	ldr	r2, [pc, #384]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	6213      	str	r3, [r2, #32]
 8003b54:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x36e>
 8003b62:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	4b58      	ldr	r3, [pc, #352]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a57      	ldr	r2, [pc, #348]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fe fb05 	bl	8002190 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fe fb01 	bl	8002190 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0b1      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCC_OscConfig+0x37e>
 8003bac:	e014      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fe faef 	bl	8002190 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe faeb 	bl	8002190 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	4b40      	ldr	r3, [pc, #256]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8087 	beq.w	8003d02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d061      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d146      	bne.n	8003c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fabf 	bl	8002190 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fe fabb 	bl	8002190 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e06d      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	4b29      	ldr	r3, [pc, #164]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3c:	d108      	bne.n	8003c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4921      	ldr	r1, [pc, #132]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c50:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a19      	ldr	r1, [r3, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	430b      	orrs	r3, r1
 8003c62:	491b      	ldr	r1, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fe fa8f 	bl	8002190 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fe fa8b 	bl	8002190 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e03d      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46a>
 8003c94:	e035      	b.n	8003d02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fa78 	bl	8002190 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fe fa74 	bl	8002190 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e026      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x498>
 8003cc2:	e01e      	b.n	8003d02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e019      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <HAL_RCC_OscConfig+0x500>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d0      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d24:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d910      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4965      	ldr	r1, [pc, #404]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a58      	ldr	r2, [pc, #352]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d040      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d115      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e073      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dde:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06b      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4936      	ldr	r1, [pc, #216]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e00:	f7fe f9c6 	bl	8002190 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fe f9c2 	bl	8002190 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e053      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d210      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b24      	ldr	r3, [pc, #144]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4922      	ldr	r1, [pc, #136]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1cc>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe f924 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08006160 	.word	0x08006160
 8003edc:	20000024 	.word	0x20000024
 8003ee0:	20000028 	.word	0x20000028

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003efe:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x36>
 8003f12:	e027      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f16:	613b      	str	r3, [r7, #16]
      break;
 8003f18:	e027      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0c9b      	lsrs	r3, r3, #18
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f32:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	0c5b      	lsrs	r3, r3, #17
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	4a11      	ldr	r2, [pc, #68]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a0d      	ldr	r2, [pc, #52]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f46:	fb03 f202 	mul.w	r2, r3, r2
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e004      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0c      	ldr	r2, [pc, #48]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	613b      	str	r3, [r7, #16]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x98>)
 8003f66:	613b      	str	r3, [r7, #16]
      break;
 8003f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6a:	693b      	ldr	r3, [r7, #16]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	007a1200 	.word	0x007a1200
 8003f80:	08006178 	.word	0x08006178
 8003f84:	08006188 	.word	0x08006188
 8003f88:	003d0900 	.word	0x003d0900

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b02      	ldr	r3, [pc, #8]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000024 	.word	0x20000024

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa4:	f7ff fff2 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	@ (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08006170 	.word	0x08006170

08003fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <RCC_Delay+0x34>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <RCC_Delay+0x38>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fe4:	bf00      	nop
  }
  while (Delay --);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f9      	bne.n	8003fe4 <RCC_Delay+0x1c>
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	20000024 	.word	0x20000024
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e041      	b.n	800409a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd ff88 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f000 fc18 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e03a      	b.n	8004132 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <HAL_TIM_Base_Start_IT+0x98>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x58>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e6:	d009      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x58>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a14      	ldr	r2, [pc, #80]	@ (8004140 <HAL_TIM_Base_Start_IT+0x9c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIM_Base_Start_IT+0x58>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a13      	ldr	r2, [pc, #76]	@ (8004144 <HAL_TIM_Base_Start_IT+0xa0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d111      	bne.n	8004120 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d010      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	e007      	b.n	8004130 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800

08004148 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e041      	b.n	80041de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f839 	bl	80041e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 fb76 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start+0x24>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e022      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b04      	cmp	r3, #4
 8004220:	d109      	bne.n	8004236 <HAL_TIM_PWM_Start+0x3e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	bf14      	ite	ne
 800422e:	2301      	movne	r3, #1
 8004230:	2300      	moveq	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	e015      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x58>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e008      	b.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e05e      	b.n	8004328 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0x82>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004278:	e013      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0x92>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004288:	e00b      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xa2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004298:	e003      	b.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd70 	bl	8004d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004330 <HAL_TIM_PWM_Start+0x138>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_TIM_PWM_Start+0x138>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_PWM_Start+0xfa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_PWM_Start+0xfa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <HAL_TIM_PWM_Start+0x13c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_PWM_Start+0xfa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <HAL_TIM_PWM_Start+0x140>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d111      	bne.n	8004316 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d010      	beq.n	8004326 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004314:	e007      	b.n	8004326 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0202 	mvn.w	r2, #2
 8004370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa5a 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa4d 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa5c 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0204 	mvn.w	r2, #4
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa34 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa27 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa36 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0208 	mvn.w	r2, #8
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2204      	movs	r2, #4
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa0e 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa01 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa10 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d020      	beq.n	8004484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0210 	mvn.w	r2, #16
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2208      	movs	r2, #8
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9e8 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9db 	bl	800482e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f9ea 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0201 	mvn.w	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd f83c 	bl	8001520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fd3e 	bl	8004f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f9ba 	bl	8004864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0220 	mvn.w	r2, #32
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fd11 	bl	8004f36 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004536:	2302      	movs	r3, #2
 8004538:	e0ae      	b.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	f200 809f 	bhi.w	8004688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004585 	.word	0x08004585
 8004554:	08004689 	.word	0x08004689
 8004558:	08004689 	.word	0x08004689
 800455c:	08004689 	.word	0x08004689
 8004560:	080045c5 	.word	0x080045c5
 8004564:	08004689 	.word	0x08004689
 8004568:	08004689 	.word	0x08004689
 800456c:	08004689 	.word	0x08004689
 8004570:	08004607 	.word	0x08004607
 8004574:	08004689 	.word	0x08004689
 8004578:	08004689 	.word	0x08004689
 800457c:	08004689 	.word	0x08004689
 8004580:	08004647 	.word	0x08004647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f9e2 	bl	8004954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e064      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa28 	bl	8004a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e043      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fa71 	bl	8004af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e023      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fabb 	bl	8004bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e002      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIM_ConfigClockSource+0x1c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0b4      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x186>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f4:	d03e      	beq.n	8004774 <HAL_TIM_ConfigClockSource+0xd4>
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046fa:	f200 8087 	bhi.w	800480c <HAL_TIM_ConfigClockSource+0x16c>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004702:	f000 8086 	beq.w	8004812 <HAL_TIM_ConfigClockSource+0x172>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470a:	d87f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b70      	cmp	r3, #112	@ 0x70
 800470e:	d01a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0xa6>
 8004710:	2b70      	cmp	r3, #112	@ 0x70
 8004712:	d87b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b60      	cmp	r3, #96	@ 0x60
 8004716:	d050      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x11a>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d877      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b50      	cmp	r3, #80	@ 0x50
 800471e:	d03c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xfa>
 8004720:	2b50      	cmp	r3, #80	@ 0x50
 8004722:	d873      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d058      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x13a>
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d86f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b30      	cmp	r3, #48	@ 0x30
 800472e:	d064      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b30      	cmp	r3, #48	@ 0x30
 8004732:	d86b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d060      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d867      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	2b10      	cmp	r3, #16
 8004742:	d05a      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	e062      	b.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004756:	f000 fafc 	bl	8004d52 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
      break;
 8004772:	e04f      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004784:	f000 fae5 	bl	8004d52 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004796:	609a      	str	r2, [r3, #8]
      break;
 8004798:	e03c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fa5c 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2150      	movs	r1, #80	@ 0x50
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fab3 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 80047b8:	e02c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fa7a 	bl	8004cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2160      	movs	r1, #96	@ 0x60
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 faa3 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 80047d8:	e01c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 fa3c 	bl	8004c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2140      	movs	r1, #64	@ 0x40
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fa93 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 80047f8:	e00c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 fa8a 	bl	8004d1e <TIM_ITRx_SetConfig>
      break;
 800480a:	e003      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e000      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
	...

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2f      	ldr	r2, [pc, #188]	@ (8004948 <TIM_Base_SetConfig+0xd0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004896:	d007      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a2c      	ldr	r2, [pc, #176]	@ (800494c <TIM_Base_SetConfig+0xd4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0x30>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <TIM_Base_SetConfig+0xd8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a22      	ldr	r2, [pc, #136]	@ (8004948 <TIM_Base_SetConfig+0xd0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00b      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c8:	d007      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	@ (800494c <TIM_Base_SetConfig+0xd4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d003      	beq.n	80048da <TIM_Base_SetConfig+0x62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <TIM_Base_SetConfig+0xd8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d108      	bne.n	80048ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a0d      	ldr	r2, [pc, #52]	@ (8004948 <TIM_Base_SetConfig+0xd0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]
  }
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800

08004954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0201 	bic.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 0302 	bic.w	r3, r3, #2
 800499c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <TIM_OC1_SetConfig+0xc8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10c      	bne.n	80049ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0308 	bic.w	r3, r3, #8
 80049b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <TIM_OC1_SetConfig+0xc8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d111      	bne.n	80049f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	621a      	str	r2, [r3, #32]
}
 8004a10:	bf00      	nop
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00

08004a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f023 0210 	bic.w	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <TIM_OC2_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <TIM_OC2_SetConfig+0xd0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d113      	bne.n	8004acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00

08004af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <TIM_OC3_SetConfig+0xd0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10d      	bne.n	8004b6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a14      	ldr	r2, [pc, #80]	@ (8004bc4 <TIM_OC3_SetConfig+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d113      	bne.n	8004b9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00

08004bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a0f      	ldr	r2, [pc, #60]	@ (8004c60 <TIM_OC4_SetConfig+0x98>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d109      	bne.n	8004c3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	019b      	lsls	r3, r3, #6
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	40012c00 	.word	0x40012c00

08004c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 030a 	bic.w	r3, r3, #10
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0210 	bic.w	r2, r3, #16
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	031b      	lsls	r3, r3, #12
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f043 0307 	orr.w	r3, r3, #7
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b087      	sub	sp, #28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	021a      	lsls	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	609a      	str	r2, [r3, #8]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2201      	movs	r2, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e046      	b.n	8004e7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a16      	ldr	r2, [pc, #88]	@ (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3c:	d009      	beq.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a12      	ldr	r2, [pc, #72]	@ (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a10      	ldr	r2, [pc, #64]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10c      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800

08004e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e03d      	b.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <memset>:
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4402      	add	r2, r0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d100      	bne.n	8004f64 <memset+0xa>
 8004f62:	4770      	bx	lr
 8004f64:	f803 1b01 	strb.w	r1, [r3], #1
 8004f68:	e7f9      	b.n	8004f5e <memset+0x4>
	...

08004f6c <__errno>:
 8004f6c:	4b01      	ldr	r3, [pc, #4]	@ (8004f74 <__errno+0x8>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000030 	.word	0x20000030

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	4d0c      	ldr	r5, [pc, #48]	@ (8004fb0 <__libc_init_array+0x38>)
 8004f7e:	4c0d      	ldr	r4, [pc, #52]	@ (8004fb4 <__libc_init_array+0x3c>)
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	f001 f8dc 	bl	8006144 <_init>
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	4d0a      	ldr	r5, [pc, #40]	@ (8004fb8 <__libc_init_array+0x40>)
 8004f90:	4c0a      	ldr	r4, [pc, #40]	@ (8004fbc <__libc_init_array+0x44>)
 8004f92:	1b64      	subs	r4, r4, r5
 8004f94:	10a4      	asrs	r4, r4, #2
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	08006200 	.word	0x08006200
 8004fb4:	08006200 	.word	0x08006200
 8004fb8:	08006200 	.word	0x08006200
 8004fbc:	08006204 	.word	0x08006204

08004fc0 <pow>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	461d      	mov	r5, r3
 8004fc8:	4680      	mov	r8, r0
 8004fca:	4689      	mov	r9, r1
 8004fcc:	f000 faf4 	bl	80055b8 <__ieee754_pow>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	4620      	mov	r0, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	f7fb fd0e 	bl	80009fc <__aeabi_dcmpun>
 8004fe0:	bbc8      	cbnz	r0, 8005056 <pow+0x96>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4649      	mov	r1, r9
 8004fea:	f7fb fcd5 	bl	8000998 <__aeabi_dcmpeq>
 8004fee:	b1b8      	cbz	r0, 8005020 <pow+0x60>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	f7fb fcce 	bl	8000998 <__aeabi_dcmpeq>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d141      	bne.n	8005084 <pow+0xc4>
 8005000:	4620      	mov	r0, r4
 8005002:	4629      	mov	r1, r5
 8005004:	f000 f9fc 	bl	8005400 <finite>
 8005008:	b328      	cbz	r0, 8005056 <pow+0x96>
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb fccb 	bl	80009ac <__aeabi_dcmplt>
 8005016:	b1f0      	cbz	r0, 8005056 <pow+0x96>
 8005018:	f7ff ffa8 	bl	8004f6c <__errno>
 800501c:	2322      	movs	r3, #34	@ 0x22
 800501e:	e019      	b.n	8005054 <pow+0x94>
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f000 f9ec 	bl	8005400 <finite>
 8005028:	b9c8      	cbnz	r0, 800505e <pow+0x9e>
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f000 f9e7 	bl	8005400 <finite>
 8005032:	b1a0      	cbz	r0, 800505e <pow+0x9e>
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f000 f9e2 	bl	8005400 <finite>
 800503c:	b178      	cbz	r0, 800505e <pow+0x9e>
 800503e:	4632      	mov	r2, r6
 8005040:	463b      	mov	r3, r7
 8005042:	4630      	mov	r0, r6
 8005044:	4639      	mov	r1, r7
 8005046:	f7fb fcd9 	bl	80009fc <__aeabi_dcmpun>
 800504a:	2800      	cmp	r0, #0
 800504c:	d0e4      	beq.n	8005018 <pow+0x58>
 800504e:	f7ff ff8d 	bl	8004f6c <__errno>
 8005052:	2321      	movs	r3, #33	@ 0x21
 8005054:	6003      	str	r3, [r0, #0]
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800505e:	2200      	movs	r2, #0
 8005060:	2300      	movs	r3, #0
 8005062:	4630      	mov	r0, r6
 8005064:	4639      	mov	r1, r7
 8005066:	f7fb fc97 	bl	8000998 <__aeabi_dcmpeq>
 800506a:	2800      	cmp	r0, #0
 800506c:	d0f3      	beq.n	8005056 <pow+0x96>
 800506e:	4640      	mov	r0, r8
 8005070:	4649      	mov	r1, r9
 8005072:	f000 f9c5 	bl	8005400 <finite>
 8005076:	2800      	cmp	r0, #0
 8005078:	d0ed      	beq.n	8005056 <pow+0x96>
 800507a:	4620      	mov	r0, r4
 800507c:	4629      	mov	r1, r5
 800507e:	f000 f9bf 	bl	8005400 <finite>
 8005082:	e7c8      	b.n	8005016 <pow+0x56>
 8005084:	2600      	movs	r6, #0
 8005086:	4f01      	ldr	r7, [pc, #4]	@ (800508c <pow+0xcc>)
 8005088:	e7e5      	b.n	8005056 <pow+0x96>
 800508a:	bf00      	nop
 800508c:	3ff00000 	.word	0x3ff00000

08005090 <sqrt>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4606      	mov	r6, r0
 8005094:	460f      	mov	r7, r1
 8005096:	f000 f9b9 	bl	800540c <__ieee754_sqrt>
 800509a:	4632      	mov	r2, r6
 800509c:	4604      	mov	r4, r0
 800509e:	460d      	mov	r5, r1
 80050a0:	463b      	mov	r3, r7
 80050a2:	4630      	mov	r0, r6
 80050a4:	4639      	mov	r1, r7
 80050a6:	f7fb fca9 	bl	80009fc <__aeabi_dcmpun>
 80050aa:	b990      	cbnz	r0, 80050d2 <sqrt+0x42>
 80050ac:	2200      	movs	r2, #0
 80050ae:	2300      	movs	r3, #0
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb fc7a 	bl	80009ac <__aeabi_dcmplt>
 80050b8:	b158      	cbz	r0, 80050d2 <sqrt+0x42>
 80050ba:	f7ff ff57 	bl	8004f6c <__errno>
 80050be:	2321      	movs	r3, #33	@ 0x21
 80050c0:	2200      	movs	r2, #0
 80050c2:	6003      	str	r3, [r0, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	f7fb fb27 	bl	800071c <__aeabi_ddiv>
 80050ce:	4604      	mov	r4, r0
 80050d0:	460d      	mov	r5, r1
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050d8 <atan>:
 80050d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	4bbc      	ldr	r3, [pc, #752]	@ (80053d0 <atan+0x2f8>)
 80050de:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80050e2:	429e      	cmp	r6, r3
 80050e4:	4604      	mov	r4, r0
 80050e6:	460d      	mov	r5, r1
 80050e8:	468b      	mov	fp, r1
 80050ea:	d918      	bls.n	800511e <atan+0x46>
 80050ec:	4bb9      	ldr	r3, [pc, #740]	@ (80053d4 <atan+0x2fc>)
 80050ee:	429e      	cmp	r6, r3
 80050f0:	d801      	bhi.n	80050f6 <atan+0x1e>
 80050f2:	d109      	bne.n	8005108 <atan+0x30>
 80050f4:	b140      	cbz	r0, 8005108 <atan+0x30>
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb f82d 	bl	800015c <__adddf3>
 8005102:	4604      	mov	r4, r0
 8005104:	460d      	mov	r5, r1
 8005106:	e006      	b.n	8005116 <atan+0x3e>
 8005108:	f1bb 0f00 	cmp.w	fp, #0
 800510c:	f340 8123 	ble.w	8005356 <atan+0x27e>
 8005110:	a593      	add	r5, pc, #588	@ (adr r5, 8005360 <atan+0x288>)
 8005112:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511e:	4bae      	ldr	r3, [pc, #696]	@ (80053d8 <atan+0x300>)
 8005120:	429e      	cmp	r6, r3
 8005122:	d811      	bhi.n	8005148 <atan+0x70>
 8005124:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005128:	429e      	cmp	r6, r3
 800512a:	d80a      	bhi.n	8005142 <atan+0x6a>
 800512c:	a38e      	add	r3, pc, #568	@ (adr r3, 8005368 <atan+0x290>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f7fb f813 	bl	800015c <__adddf3>
 8005136:	2200      	movs	r2, #0
 8005138:	4ba8      	ldr	r3, [pc, #672]	@ (80053dc <atan+0x304>)
 800513a:	f7fb fc55 	bl	80009e8 <__aeabi_dcmpgt>
 800513e:	2800      	cmp	r0, #0
 8005140:	d1e9      	bne.n	8005116 <atan+0x3e>
 8005142:	f04f 3aff 	mov.w	sl, #4294967295
 8005146:	e027      	b.n	8005198 <atan+0xc0>
 8005148:	f000 f956 	bl	80053f8 <fabs>
 800514c:	4ba4      	ldr	r3, [pc, #656]	@ (80053e0 <atan+0x308>)
 800514e:	4604      	mov	r4, r0
 8005150:	429e      	cmp	r6, r3
 8005152:	460d      	mov	r5, r1
 8005154:	f200 80b8 	bhi.w	80052c8 <atan+0x1f0>
 8005158:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800515c:	429e      	cmp	r6, r3
 800515e:	f200 809c 	bhi.w	800529a <atan+0x1c2>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	f7fa fff9 	bl	800015c <__adddf3>
 800516a:	2200      	movs	r2, #0
 800516c:	4b9b      	ldr	r3, [pc, #620]	@ (80053dc <atan+0x304>)
 800516e:	f7fa fff3 	bl	8000158 <__aeabi_dsub>
 8005172:	2200      	movs	r2, #0
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800517c:	4620      	mov	r0, r4
 800517e:	4629      	mov	r1, r5
 8005180:	f7fa ffec 	bl	800015c <__adddf3>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fb fac6 	bl	800071c <__aeabi_ddiv>
 8005190:	f04f 0a00 	mov.w	sl, #0
 8005194:	4604      	mov	r4, r0
 8005196:	460d      	mov	r5, r1
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	4620      	mov	r0, r4
 800519e:	4629      	mov	r1, r5
 80051a0:	f7fb f992 	bl	80004c8 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4680      	mov	r8, r0
 80051aa:	4689      	mov	r9, r1
 80051ac:	f7fb f98c 	bl	80004c8 <__aeabi_dmul>
 80051b0:	a36f      	add	r3, pc, #444	@ (adr r3, 8005370 <atan+0x298>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	4606      	mov	r6, r0
 80051b8:	460f      	mov	r7, r1
 80051ba:	f7fb f985 	bl	80004c8 <__aeabi_dmul>
 80051be:	a36e      	add	r3, pc, #440	@ (adr r3, 8005378 <atan+0x2a0>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fa ffca 	bl	800015c <__adddf3>
 80051c8:	4632      	mov	r2, r6
 80051ca:	463b      	mov	r3, r7
 80051cc:	f7fb f97c 	bl	80004c8 <__aeabi_dmul>
 80051d0:	a36b      	add	r3, pc, #428	@ (adr r3, 8005380 <atan+0x2a8>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fa ffc1 	bl	800015c <__adddf3>
 80051da:	4632      	mov	r2, r6
 80051dc:	463b      	mov	r3, r7
 80051de:	f7fb f973 	bl	80004c8 <__aeabi_dmul>
 80051e2:	a369      	add	r3, pc, #420	@ (adr r3, 8005388 <atan+0x2b0>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fa ffb8 	bl	800015c <__adddf3>
 80051ec:	4632      	mov	r2, r6
 80051ee:	463b      	mov	r3, r7
 80051f0:	f7fb f96a 	bl	80004c8 <__aeabi_dmul>
 80051f4:	a366      	add	r3, pc, #408	@ (adr r3, 8005390 <atan+0x2b8>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fa ffaf 	bl	800015c <__adddf3>
 80051fe:	4632      	mov	r2, r6
 8005200:	463b      	mov	r3, r7
 8005202:	f7fb f961 	bl	80004c8 <__aeabi_dmul>
 8005206:	a364      	add	r3, pc, #400	@ (adr r3, 8005398 <atan+0x2c0>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fa ffa6 	bl	800015c <__adddf3>
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	f7fb f958 	bl	80004c8 <__aeabi_dmul>
 8005218:	a361      	add	r3, pc, #388	@ (adr r3, 80053a0 <atan+0x2c8>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	4680      	mov	r8, r0
 8005220:	4689      	mov	r9, r1
 8005222:	4630      	mov	r0, r6
 8005224:	4639      	mov	r1, r7
 8005226:	f7fb f94f 	bl	80004c8 <__aeabi_dmul>
 800522a:	a35f      	add	r3, pc, #380	@ (adr r3, 80053a8 <atan+0x2d0>)
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f7fa ff92 	bl	8000158 <__aeabi_dsub>
 8005234:	4632      	mov	r2, r6
 8005236:	463b      	mov	r3, r7
 8005238:	f7fb f946 	bl	80004c8 <__aeabi_dmul>
 800523c:	a35c      	add	r3, pc, #368	@ (adr r3, 80053b0 <atan+0x2d8>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7fa ff89 	bl	8000158 <__aeabi_dsub>
 8005246:	4632      	mov	r2, r6
 8005248:	463b      	mov	r3, r7
 800524a:	f7fb f93d 	bl	80004c8 <__aeabi_dmul>
 800524e:	a35a      	add	r3, pc, #360	@ (adr r3, 80053b8 <atan+0x2e0>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fa ff80 	bl	8000158 <__aeabi_dsub>
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	f7fb f934 	bl	80004c8 <__aeabi_dmul>
 8005260:	a357      	add	r3, pc, #348	@ (adr r3, 80053c0 <atan+0x2e8>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fa ff77 	bl	8000158 <__aeabi_dsub>
 800526a:	4632      	mov	r2, r6
 800526c:	463b      	mov	r3, r7
 800526e:	f7fb f92b 	bl	80004c8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4640      	mov	r0, r8
 8005278:	4649      	mov	r1, r9
 800527a:	f7fa ff6f 	bl	800015c <__adddf3>
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	f7fb f921 	bl	80004c8 <__aeabi_dmul>
 8005286:	f1ba 3fff 	cmp.w	sl, #4294967295
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	d144      	bne.n	800531a <atan+0x242>
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fa ff60 	bl	8000158 <__aeabi_dsub>
 8005298:	e733      	b.n	8005102 <atan+0x2a>
 800529a:	2200      	movs	r2, #0
 800529c:	4b4f      	ldr	r3, [pc, #316]	@ (80053dc <atan+0x304>)
 800529e:	f7fa ff5b 	bl	8000158 <__aeabi_dsub>
 80052a2:	2200      	movs	r2, #0
 80052a4:	4606      	mov	r6, r0
 80052a6:	460f      	mov	r7, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	4b4b      	ldr	r3, [pc, #300]	@ (80053dc <atan+0x304>)
 80052ae:	f7fa ff55 	bl	800015c <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	f7fb fa2f 	bl	800071c <__aeabi_ddiv>
 80052be:	f04f 0a01 	mov.w	sl, #1
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	e767      	b.n	8005198 <atan+0xc0>
 80052c8:	4b46      	ldr	r3, [pc, #280]	@ (80053e4 <atan+0x30c>)
 80052ca:	429e      	cmp	r6, r3
 80052cc:	d21a      	bcs.n	8005304 <atan+0x22c>
 80052ce:	2200      	movs	r2, #0
 80052d0:	4b45      	ldr	r3, [pc, #276]	@ (80053e8 <atan+0x310>)
 80052d2:	f7fa ff41 	bl	8000158 <__aeabi_dsub>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4606      	mov	r6, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	4b41      	ldr	r3, [pc, #260]	@ (80053e8 <atan+0x310>)
 80052e2:	f7fb f8f1 	bl	80004c8 <__aeabi_dmul>
 80052e6:	2200      	movs	r2, #0
 80052e8:	4b3c      	ldr	r3, [pc, #240]	@ (80053dc <atan+0x304>)
 80052ea:	f7fa ff37 	bl	800015c <__adddf3>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4630      	mov	r0, r6
 80052f4:	4639      	mov	r1, r7
 80052f6:	f7fb fa11 	bl	800071c <__aeabi_ddiv>
 80052fa:	f04f 0a02 	mov.w	sl, #2
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	e749      	b.n	8005198 <atan+0xc0>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	2000      	movs	r0, #0
 800530a:	4938      	ldr	r1, [pc, #224]	@ (80053ec <atan+0x314>)
 800530c:	f7fb fa06 	bl	800071c <__aeabi_ddiv>
 8005310:	f04f 0a03 	mov.w	sl, #3
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	e73e      	b.n	8005198 <atan+0xc0>
 800531a:	4b35      	ldr	r3, [pc, #212]	@ (80053f0 <atan+0x318>)
 800531c:	4e35      	ldr	r6, [pc, #212]	@ (80053f4 <atan+0x31c>)
 800531e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fa ff17 	bl	8000158 <__aeabi_dsub>
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	f7fa ff13 	bl	8000158 <__aeabi_dsub>
 8005332:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800533e:	f7fa ff0b 	bl	8000158 <__aeabi_dsub>
 8005342:	f1bb 0f00 	cmp.w	fp, #0
 8005346:	4604      	mov	r4, r0
 8005348:	460d      	mov	r5, r1
 800534a:	f6bf aee4 	bge.w	8005116 <atan+0x3e>
 800534e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005352:	461d      	mov	r5, r3
 8005354:	e6df      	b.n	8005116 <atan+0x3e>
 8005356:	a51c      	add	r5, pc, #112	@ (adr r5, 80053c8 <atan+0x2f0>)
 8005358:	e9d5 4500 	ldrd	r4, r5, [r5]
 800535c:	e6db      	b.n	8005116 <atan+0x3e>
 800535e:	bf00      	nop
 8005360:	54442d18 	.word	0x54442d18
 8005364:	3ff921fb 	.word	0x3ff921fb
 8005368:	8800759c 	.word	0x8800759c
 800536c:	7e37e43c 	.word	0x7e37e43c
 8005370:	e322da11 	.word	0xe322da11
 8005374:	3f90ad3a 	.word	0x3f90ad3a
 8005378:	24760deb 	.word	0x24760deb
 800537c:	3fa97b4b 	.word	0x3fa97b4b
 8005380:	a0d03d51 	.word	0xa0d03d51
 8005384:	3fb10d66 	.word	0x3fb10d66
 8005388:	c54c206e 	.word	0xc54c206e
 800538c:	3fb745cd 	.word	0x3fb745cd
 8005390:	920083ff 	.word	0x920083ff
 8005394:	3fc24924 	.word	0x3fc24924
 8005398:	5555550d 	.word	0x5555550d
 800539c:	3fd55555 	.word	0x3fd55555
 80053a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80053a4:	bfa2b444 	.word	0xbfa2b444
 80053a8:	52defd9a 	.word	0x52defd9a
 80053ac:	3fadde2d 	.word	0x3fadde2d
 80053b0:	af749a6d 	.word	0xaf749a6d
 80053b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80053b8:	fe231671 	.word	0xfe231671
 80053bc:	3fbc71c6 	.word	0x3fbc71c6
 80053c0:	9998ebc4 	.word	0x9998ebc4
 80053c4:	3fc99999 	.word	0x3fc99999
 80053c8:	54442d18 	.word	0x54442d18
 80053cc:	bff921fb 	.word	0xbff921fb
 80053d0:	440fffff 	.word	0x440fffff
 80053d4:	7ff00000 	.word	0x7ff00000
 80053d8:	3fdbffff 	.word	0x3fdbffff
 80053dc:	3ff00000 	.word	0x3ff00000
 80053e0:	3ff2ffff 	.word	0x3ff2ffff
 80053e4:	40038000 	.word	0x40038000
 80053e8:	3ff80000 	.word	0x3ff80000
 80053ec:	bff00000 	.word	0xbff00000
 80053f0:	08006190 	.word	0x08006190
 80053f4:	080061b0 	.word	0x080061b0

080053f8 <fabs>:
 80053f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80053fc:	4619      	mov	r1, r3
 80053fe:	4770      	bx	lr

08005400 <finite>:
 8005400:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8005404:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8005408:	0fc0      	lsrs	r0, r0, #31
 800540a:	4770      	bx	lr

0800540c <__ieee754_sqrt>:
 800540c:	4a67      	ldr	r2, [pc, #412]	@ (80055ac <__ieee754_sqrt+0x1a0>)
 800540e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005412:	438a      	bics	r2, r1
 8005414:	4606      	mov	r6, r0
 8005416:	460f      	mov	r7, r1
 8005418:	460b      	mov	r3, r1
 800541a:	4604      	mov	r4, r0
 800541c:	d10e      	bne.n	800543c <__ieee754_sqrt+0x30>
 800541e:	4602      	mov	r2, r0
 8005420:	f7fb f852 	bl	80004c8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4630      	mov	r0, r6
 800542a:	4639      	mov	r1, r7
 800542c:	f7fa fe96 	bl	800015c <__adddf3>
 8005430:	4606      	mov	r6, r0
 8005432:	460f      	mov	r7, r1
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543c:	2900      	cmp	r1, #0
 800543e:	dc0c      	bgt.n	800545a <__ieee754_sqrt+0x4e>
 8005440:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005444:	4302      	orrs	r2, r0
 8005446:	d0f5      	beq.n	8005434 <__ieee754_sqrt+0x28>
 8005448:	b189      	cbz	r1, 800546e <__ieee754_sqrt+0x62>
 800544a:	4602      	mov	r2, r0
 800544c:	f7fa fe84 	bl	8000158 <__aeabi_dsub>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	f7fb f962 	bl	800071c <__aeabi_ddiv>
 8005458:	e7ea      	b.n	8005430 <__ieee754_sqrt+0x24>
 800545a:	150a      	asrs	r2, r1, #20
 800545c:	d115      	bne.n	800548a <__ieee754_sqrt+0x7e>
 800545e:	2100      	movs	r1, #0
 8005460:	e009      	b.n	8005476 <__ieee754_sqrt+0x6a>
 8005462:	0ae3      	lsrs	r3, r4, #11
 8005464:	3a15      	subs	r2, #21
 8005466:	0564      	lsls	r4, r4, #21
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0fa      	beq.n	8005462 <__ieee754_sqrt+0x56>
 800546c:	e7f7      	b.n	800545e <__ieee754_sqrt+0x52>
 800546e:	460a      	mov	r2, r1
 8005470:	e7fa      	b.n	8005468 <__ieee754_sqrt+0x5c>
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	3101      	adds	r1, #1
 8005476:	02d8      	lsls	r0, r3, #11
 8005478:	d5fb      	bpl.n	8005472 <__ieee754_sqrt+0x66>
 800547a:	1e48      	subs	r0, r1, #1
 800547c:	1a12      	subs	r2, r2, r0
 800547e:	f1c1 0020 	rsb	r0, r1, #32
 8005482:	fa24 f000 	lsr.w	r0, r4, r0
 8005486:	4303      	orrs	r3, r0
 8005488:	408c      	lsls	r4, r1
 800548a:	2600      	movs	r6, #0
 800548c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005490:	2116      	movs	r1, #22
 8005492:	07d2      	lsls	r2, r2, #31
 8005494:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005498:	4632      	mov	r2, r6
 800549a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a2:	bf5c      	itt	pl
 80054a4:	005b      	lslpl	r3, r3, #1
 80054a6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80054aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054ae:	bf58      	it	pl
 80054b0:	0064      	lslpl	r4, r4, #1
 80054b2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80054b6:	107f      	asrs	r7, r7, #1
 80054b8:	0064      	lsls	r4, r4, #1
 80054ba:	1815      	adds	r5, r2, r0
 80054bc:	429d      	cmp	r5, r3
 80054be:	bfde      	ittt	le
 80054c0:	182a      	addle	r2, r5, r0
 80054c2:	1b5b      	suble	r3, r3, r5
 80054c4:	1836      	addle	r6, r6, r0
 80054c6:	0fe5      	lsrs	r5, r4, #31
 80054c8:	3901      	subs	r1, #1
 80054ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80054ce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80054d2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80054d6:	d1f0      	bne.n	80054ba <__ieee754_sqrt+0xae>
 80054d8:	460d      	mov	r5, r1
 80054da:	f04f 0a20 	mov.w	sl, #32
 80054de:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80054e2:	429a      	cmp	r2, r3
 80054e4:	eb01 0c00 	add.w	ip, r1, r0
 80054e8:	db02      	blt.n	80054f0 <__ieee754_sqrt+0xe4>
 80054ea:	d113      	bne.n	8005514 <__ieee754_sqrt+0x108>
 80054ec:	45a4      	cmp	ip, r4
 80054ee:	d811      	bhi.n	8005514 <__ieee754_sqrt+0x108>
 80054f0:	f1bc 0f00 	cmp.w	ip, #0
 80054f4:	eb0c 0100 	add.w	r1, ip, r0
 80054f8:	da42      	bge.n	8005580 <__ieee754_sqrt+0x174>
 80054fa:	2900      	cmp	r1, #0
 80054fc:	db40      	blt.n	8005580 <__ieee754_sqrt+0x174>
 80054fe:	f102 0e01 	add.w	lr, r2, #1
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	4672      	mov	r2, lr
 8005506:	45a4      	cmp	ip, r4
 8005508:	bf88      	it	hi
 800550a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800550e:	eba4 040c 	sub.w	r4, r4, ip
 8005512:	4405      	add	r5, r0
 8005514:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005518:	f1ba 0a01 	subs.w	sl, sl, #1
 800551c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005520:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005524:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005528:	d1db      	bne.n	80054e2 <__ieee754_sqrt+0xd6>
 800552a:	431c      	orrs	r4, r3
 800552c:	d01a      	beq.n	8005564 <__ieee754_sqrt+0x158>
 800552e:	4c20      	ldr	r4, [pc, #128]	@ (80055b0 <__ieee754_sqrt+0x1a4>)
 8005530:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80055b4 <__ieee754_sqrt+0x1a8>
 8005534:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005538:	e9db 2300 	ldrd	r2, r3, [fp]
 800553c:	f7fa fe0c 	bl	8000158 <__aeabi_dsub>
 8005540:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4640      	mov	r0, r8
 800554a:	4649      	mov	r1, r9
 800554c:	f7fb fa38 	bl	80009c0 <__aeabi_dcmple>
 8005550:	b140      	cbz	r0, 8005564 <__ieee754_sqrt+0x158>
 8005552:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005556:	e9db 2300 	ldrd	r2, r3, [fp]
 800555a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800555e:	d111      	bne.n	8005584 <__ieee754_sqrt+0x178>
 8005560:	4655      	mov	r5, sl
 8005562:	3601      	adds	r6, #1
 8005564:	1072      	asrs	r2, r6, #1
 8005566:	086b      	lsrs	r3, r5, #1
 8005568:	07f1      	lsls	r1, r6, #31
 800556a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800556e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005572:	bf48      	it	mi
 8005574:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005578:	4618      	mov	r0, r3
 800557a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800557e:	e757      	b.n	8005430 <__ieee754_sqrt+0x24>
 8005580:	4696      	mov	lr, r2
 8005582:	e7be      	b.n	8005502 <__ieee754_sqrt+0xf6>
 8005584:	f7fa fdea 	bl	800015c <__adddf3>
 8005588:	e9d4 8900 	ldrd	r8, r9, [r4]
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4640      	mov	r0, r8
 8005592:	4649      	mov	r1, r9
 8005594:	f7fb fa0a 	bl	80009ac <__aeabi_dcmplt>
 8005598:	b120      	cbz	r0, 80055a4 <__ieee754_sqrt+0x198>
 800559a:	1ca8      	adds	r0, r5, #2
 800559c:	bf08      	it	eq
 800559e:	3601      	addeq	r6, #1
 80055a0:	3502      	adds	r5, #2
 80055a2:	e7df      	b.n	8005564 <__ieee754_sqrt+0x158>
 80055a4:	1c6b      	adds	r3, r5, #1
 80055a6:	f023 0501 	bic.w	r5, r3, #1
 80055aa:	e7db      	b.n	8005564 <__ieee754_sqrt+0x158>
 80055ac:	7ff00000 	.word	0x7ff00000
 80055b0:	20000088 	.word	0x20000088
 80055b4:	20000080 	.word	0x20000080

080055b8 <__ieee754_pow>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b091      	sub	sp, #68	@ 0x44
 80055be:	e9cd 2300 	strd	r2, r3, [sp]
 80055c2:	468b      	mov	fp, r1
 80055c4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80055c8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80055cc:	4682      	mov	sl, r0
 80055ce:	ea57 0001 	orrs.w	r0, r7, r1
 80055d2:	d112      	bne.n	80055fa <__ieee754_pow+0x42>
 80055d4:	4653      	mov	r3, sl
 80055d6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80055da:	18db      	adds	r3, r3, r3
 80055dc:	4152      	adcs	r2, r2
 80055de:	4298      	cmp	r0, r3
 80055e0:	4b91      	ldr	r3, [pc, #580]	@ (8005828 <__ieee754_pow+0x270>)
 80055e2:	4193      	sbcs	r3, r2
 80055e4:	f080 84ce 	bcs.w	8005f84 <__ieee754_pow+0x9cc>
 80055e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ec:	4650      	mov	r0, sl
 80055ee:	4659      	mov	r1, fp
 80055f0:	f7fa fdb4 	bl	800015c <__adddf3>
 80055f4:	b011      	add	sp, #68	@ 0x44
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	4b8c      	ldr	r3, [pc, #560]	@ (800582c <__ieee754_pow+0x274>)
 80055fc:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8005600:	429e      	cmp	r6, r3
 8005602:	465d      	mov	r5, fp
 8005604:	46d1      	mov	r9, sl
 8005606:	d807      	bhi.n	8005618 <__ieee754_pow+0x60>
 8005608:	d102      	bne.n	8005610 <__ieee754_pow+0x58>
 800560a:	f1ba 0f00 	cmp.w	sl, #0
 800560e:	d1eb      	bne.n	80055e8 <__ieee754_pow+0x30>
 8005610:	429f      	cmp	r7, r3
 8005612:	d801      	bhi.n	8005618 <__ieee754_pow+0x60>
 8005614:	d10f      	bne.n	8005636 <__ieee754_pow+0x7e>
 8005616:	b171      	cbz	r1, 8005636 <__ieee754_pow+0x7e>
 8005618:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800561c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005620:	ea55 0509 	orrs.w	r5, r5, r9
 8005624:	d1e0      	bne.n	80055e8 <__ieee754_pow+0x30>
 8005626:	e9dd 3200 	ldrd	r3, r2, [sp]
 800562a:	18db      	adds	r3, r3, r3
 800562c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005630:	4152      	adcs	r2, r2
 8005632:	429d      	cmp	r5, r3
 8005634:	e7d4      	b.n	80055e0 <__ieee754_pow+0x28>
 8005636:	2d00      	cmp	r5, #0
 8005638:	4633      	mov	r3, r6
 800563a:	da39      	bge.n	80056b0 <__ieee754_pow+0xf8>
 800563c:	4a7c      	ldr	r2, [pc, #496]	@ (8005830 <__ieee754_pow+0x278>)
 800563e:	4297      	cmp	r7, r2
 8005640:	d84e      	bhi.n	80056e0 <__ieee754_pow+0x128>
 8005642:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005646:	4297      	cmp	r7, r2
 8005648:	f240 84ab 	bls.w	8005fa2 <__ieee754_pow+0x9ea>
 800564c:	153a      	asrs	r2, r7, #20
 800564e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005652:	2a14      	cmp	r2, #20
 8005654:	dd0f      	ble.n	8005676 <__ieee754_pow+0xbe>
 8005656:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800565a:	fa21 f402 	lsr.w	r4, r1, r2
 800565e:	fa04 f202 	lsl.w	r2, r4, r2
 8005662:	428a      	cmp	r2, r1
 8005664:	f040 849d 	bne.w	8005fa2 <__ieee754_pow+0x9ea>
 8005668:	f004 0401 	and.w	r4, r4, #1
 800566c:	f1c4 0402 	rsb	r4, r4, #2
 8005670:	2900      	cmp	r1, #0
 8005672:	d15a      	bne.n	800572a <__ieee754_pow+0x172>
 8005674:	e00e      	b.n	8005694 <__ieee754_pow+0xdc>
 8005676:	2900      	cmp	r1, #0
 8005678:	d156      	bne.n	8005728 <__ieee754_pow+0x170>
 800567a:	f1c2 0214 	rsb	r2, r2, #20
 800567e:	fa47 f402 	asr.w	r4, r7, r2
 8005682:	fa04 f202 	lsl.w	r2, r4, r2
 8005686:	42ba      	cmp	r2, r7
 8005688:	f040 8488 	bne.w	8005f9c <__ieee754_pow+0x9e4>
 800568c:	f004 0401 	and.w	r4, r4, #1
 8005690:	f1c4 0402 	rsb	r4, r4, #2
 8005694:	4a67      	ldr	r2, [pc, #412]	@ (8005834 <__ieee754_pow+0x27c>)
 8005696:	4297      	cmp	r7, r2
 8005698:	d130      	bne.n	80056fc <__ieee754_pow+0x144>
 800569a:	f1b8 0f00 	cmp.w	r8, #0
 800569e:	f280 8479 	bge.w	8005f94 <__ieee754_pow+0x9dc>
 80056a2:	4652      	mov	r2, sl
 80056a4:	465b      	mov	r3, fp
 80056a6:	2000      	movs	r0, #0
 80056a8:	4962      	ldr	r1, [pc, #392]	@ (8005834 <__ieee754_pow+0x27c>)
 80056aa:	f7fb f837 	bl	800071c <__aeabi_ddiv>
 80056ae:	e7a1      	b.n	80055f4 <__ieee754_pow+0x3c>
 80056b0:	2400      	movs	r4, #0
 80056b2:	2900      	cmp	r1, #0
 80056b4:	d139      	bne.n	800572a <__ieee754_pow+0x172>
 80056b6:	4a5d      	ldr	r2, [pc, #372]	@ (800582c <__ieee754_pow+0x274>)
 80056b8:	4297      	cmp	r7, r2
 80056ba:	d1eb      	bne.n	8005694 <__ieee754_pow+0xdc>
 80056bc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80056c0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80056c4:	ea53 0309 	orrs.w	r3, r3, r9
 80056c8:	f000 845c 	beq.w	8005f84 <__ieee754_pow+0x9cc>
 80056cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005838 <__ieee754_pow+0x280>)
 80056ce:	429e      	cmp	r6, r3
 80056d0:	d908      	bls.n	80056e4 <__ieee754_pow+0x12c>
 80056d2:	f1b8 0f00 	cmp.w	r8, #0
 80056d6:	f2c0 8459 	blt.w	8005f8c <__ieee754_pow+0x9d4>
 80056da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056de:	e789      	b.n	80055f4 <__ieee754_pow+0x3c>
 80056e0:	2402      	movs	r4, #2
 80056e2:	e7e6      	b.n	80056b2 <__ieee754_pow+0xfa>
 80056e4:	f1b8 0f00 	cmp.w	r8, #0
 80056e8:	f04f 0000 	mov.w	r0, #0
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	da80      	bge.n	80055f4 <__ieee754_pow+0x3c>
 80056f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80056f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80056fa:	e77b      	b.n	80055f4 <__ieee754_pow+0x3c>
 80056fc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8005700:	d106      	bne.n	8005710 <__ieee754_pow+0x158>
 8005702:	4652      	mov	r2, sl
 8005704:	465b      	mov	r3, fp
 8005706:	4650      	mov	r0, sl
 8005708:	4659      	mov	r1, fp
 800570a:	f7fa fedd 	bl	80004c8 <__aeabi_dmul>
 800570e:	e771      	b.n	80055f4 <__ieee754_pow+0x3c>
 8005710:	4a4a      	ldr	r2, [pc, #296]	@ (800583c <__ieee754_pow+0x284>)
 8005712:	4590      	cmp	r8, r2
 8005714:	d109      	bne.n	800572a <__ieee754_pow+0x172>
 8005716:	2d00      	cmp	r5, #0
 8005718:	db07      	blt.n	800572a <__ieee754_pow+0x172>
 800571a:	4650      	mov	r0, sl
 800571c:	4659      	mov	r1, fp
 800571e:	b011      	add	sp, #68	@ 0x44
 8005720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	f7ff be72 	b.w	800540c <__ieee754_sqrt>
 8005728:	2400      	movs	r4, #0
 800572a:	4650      	mov	r0, sl
 800572c:	4659      	mov	r1, fp
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	f7ff fe62 	bl	80053f8 <fabs>
 8005734:	9b02      	ldr	r3, [sp, #8]
 8005736:	f1b9 0f00 	cmp.w	r9, #0
 800573a:	d127      	bne.n	800578c <__ieee754_pow+0x1d4>
 800573c:	4a3d      	ldr	r2, [pc, #244]	@ (8005834 <__ieee754_pow+0x27c>)
 800573e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8005742:	4594      	cmp	ip, r2
 8005744:	d000      	beq.n	8005748 <__ieee754_pow+0x190>
 8005746:	bb0e      	cbnz	r6, 800578c <__ieee754_pow+0x1d4>
 8005748:	f1b8 0f00 	cmp.w	r8, #0
 800574c:	da05      	bge.n	800575a <__ieee754_pow+0x1a2>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	2000      	movs	r0, #0
 8005754:	4937      	ldr	r1, [pc, #220]	@ (8005834 <__ieee754_pow+0x27c>)
 8005756:	f7fa ffe1 	bl	800071c <__aeabi_ddiv>
 800575a:	2d00      	cmp	r5, #0
 800575c:	f6bf af4a 	bge.w	80055f4 <__ieee754_pow+0x3c>
 8005760:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8005764:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005768:	4326      	orrs	r6, r4
 800576a:	d108      	bne.n	800577e <__ieee754_pow+0x1c6>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f7fa fcf0 	bl	8000158 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e795      	b.n	80056aa <__ieee754_pow+0xf2>
 800577e:	2c01      	cmp	r4, #1
 8005780:	f47f af38 	bne.w	80055f4 <__ieee754_pow+0x3c>
 8005784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005788:	4619      	mov	r1, r3
 800578a:	e733      	b.n	80055f4 <__ieee754_pow+0x3c>
 800578c:	0fea      	lsrs	r2, r5, #31
 800578e:	3a01      	subs	r2, #1
 8005790:	ea52 0c04 	orrs.w	ip, r2, r4
 8005794:	d102      	bne.n	800579c <__ieee754_pow+0x1e4>
 8005796:	4652      	mov	r2, sl
 8005798:	465b      	mov	r3, fp
 800579a:	e7e9      	b.n	8005770 <__ieee754_pow+0x1b8>
 800579c:	f04f 0900 	mov.w	r9, #0
 80057a0:	3c01      	subs	r4, #1
 80057a2:	4314      	orrs	r4, r2
 80057a4:	bf14      	ite	ne
 80057a6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8005834 <__ieee754_pow+0x27c>
 80057aa:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8005840 <__ieee754_pow+0x288>
 80057ae:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80057b2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80057b6:	f240 8107 	bls.w	80059c8 <__ieee754_pow+0x410>
 80057ba:	4b22      	ldr	r3, [pc, #136]	@ (8005844 <__ieee754_pow+0x28c>)
 80057bc:	429f      	cmp	r7, r3
 80057be:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <__ieee754_pow+0x280>)
 80057c0:	d913      	bls.n	80057ea <__ieee754_pow+0x232>
 80057c2:	429e      	cmp	r6, r3
 80057c4:	d808      	bhi.n	80057d8 <__ieee754_pow+0x220>
 80057c6:	f1b8 0f00 	cmp.w	r8, #0
 80057ca:	da08      	bge.n	80057de <__ieee754_pow+0x226>
 80057cc:	2000      	movs	r0, #0
 80057ce:	b011      	add	sp, #68	@ 0x44
 80057d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	f000 bcb0 	b.w	8006138 <__math_oflow>
 80057d8:	f1b8 0f00 	cmp.w	r8, #0
 80057dc:	dcf6      	bgt.n	80057cc <__ieee754_pow+0x214>
 80057de:	2000      	movs	r0, #0
 80057e0:	b011      	add	sp, #68	@ 0x44
 80057e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e6:	f000 bca2 	b.w	800612e <__math_uflow>
 80057ea:	429e      	cmp	r6, r3
 80057ec:	d20c      	bcs.n	8005808 <__ieee754_pow+0x250>
 80057ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2300      	movs	r3, #0
 80057f6:	f7fb f8d9 	bl	80009ac <__aeabi_dcmplt>
 80057fa:	3800      	subs	r0, #0
 80057fc:	bf18      	it	ne
 80057fe:	2001      	movne	r0, #1
 8005800:	f1b8 0f00 	cmp.w	r8, #0
 8005804:	daec      	bge.n	80057e0 <__ieee754_pow+0x228>
 8005806:	e7e2      	b.n	80057ce <__ieee754_pow+0x216>
 8005808:	4b0a      	ldr	r3, [pc, #40]	@ (8005834 <__ieee754_pow+0x27c>)
 800580a:	2200      	movs	r2, #0
 800580c:	429e      	cmp	r6, r3
 800580e:	d91b      	bls.n	8005848 <__ieee754_pow+0x290>
 8005810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005814:	2300      	movs	r3, #0
 8005816:	f7fb f8c9 	bl	80009ac <__aeabi_dcmplt>
 800581a:	3800      	subs	r0, #0
 800581c:	bf18      	it	ne
 800581e:	2001      	movne	r0, #1
 8005820:	f1b8 0f00 	cmp.w	r8, #0
 8005824:	dcd3      	bgt.n	80057ce <__ieee754_pow+0x216>
 8005826:	e7db      	b.n	80057e0 <__ieee754_pow+0x228>
 8005828:	fff00000 	.word	0xfff00000
 800582c:	7ff00000 	.word	0x7ff00000
 8005830:	433fffff 	.word	0x433fffff
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	3fefffff 	.word	0x3fefffff
 800583c:	3fe00000 	.word	0x3fe00000
 8005840:	bff00000 	.word	0xbff00000
 8005844:	43f00000 	.word	0x43f00000
 8005848:	4b5b      	ldr	r3, [pc, #364]	@ (80059b8 <__ieee754_pow+0x400>)
 800584a:	f7fa fc85 	bl	8000158 <__aeabi_dsub>
 800584e:	a352      	add	r3, pc, #328	@ (adr r3, 8005998 <__ieee754_pow+0x3e0>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	f7fa fe36 	bl	80004c8 <__aeabi_dmul>
 800585c:	a350      	add	r3, pc, #320	@ (adr r3, 80059a0 <__ieee754_pow+0x3e8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	4620      	mov	r0, r4
 8005868:	4629      	mov	r1, r5
 800586a:	f7fa fe2d 	bl	80004c8 <__aeabi_dmul>
 800586e:	2200      	movs	r2, #0
 8005870:	4682      	mov	sl, r0
 8005872:	468b      	mov	fp, r1
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	4b50      	ldr	r3, [pc, #320]	@ (80059bc <__ieee754_pow+0x404>)
 800587a:	f7fa fe25 	bl	80004c8 <__aeabi_dmul>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	a149      	add	r1, pc, #292	@ (adr r1, 80059a8 <__ieee754_pow+0x3f0>)
 8005884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005888:	f7fa fc66 	bl	8000158 <__aeabi_dsub>
 800588c:	4622      	mov	r2, r4
 800588e:	462b      	mov	r3, r5
 8005890:	f7fa fe1a 	bl	80004c8 <__aeabi_dmul>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	2000      	movs	r0, #0
 800589a:	4949      	ldr	r1, [pc, #292]	@ (80059c0 <__ieee754_pow+0x408>)
 800589c:	f7fa fc5c 	bl	8000158 <__aeabi_dsub>
 80058a0:	4622      	mov	r2, r4
 80058a2:	4680      	mov	r8, r0
 80058a4:	4689      	mov	r9, r1
 80058a6:	462b      	mov	r3, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7fa fe0c 	bl	80004c8 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fa fe06 	bl	80004c8 <__aeabi_dmul>
 80058bc:	a33c      	add	r3, pc, #240	@ (adr r3, 80059b0 <__ieee754_pow+0x3f8>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fe01 	bl	80004c8 <__aeabi_dmul>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4650      	mov	r0, sl
 80058cc:	4659      	mov	r1, fp
 80058ce:	f7fa fc43 	bl	8000158 <__aeabi_dsub>
 80058d2:	2400      	movs	r4, #0
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4680      	mov	r8, r0
 80058da:	4689      	mov	r9, r1
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fc3c 	bl	800015c <__adddf3>
 80058e4:	4632      	mov	r2, r6
 80058e6:	463b      	mov	r3, r7
 80058e8:	4620      	mov	r0, r4
 80058ea:	460d      	mov	r5, r1
 80058ec:	f7fa fc34 	bl	8000158 <__aeabi_dsub>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4640      	mov	r0, r8
 80058f6:	4649      	mov	r1, r9
 80058f8:	f7fa fc2e 	bl	8000158 <__aeabi_dsub>
 80058fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005904:	2300      	movs	r3, #0
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005914:	4652      	mov	r2, sl
 8005916:	465b      	mov	r3, fp
 8005918:	f7fa fc1e 	bl	8000158 <__aeabi_dsub>
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	f7fa fdd2 	bl	80004c8 <__aeabi_dmul>
 8005924:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005928:	4680      	mov	r8, r0
 800592a:	4689      	mov	r9, r1
 800592c:	4630      	mov	r0, r6
 800592e:	4639      	mov	r1, r7
 8005930:	f7fa fdca 	bl	80004c8 <__aeabi_dmul>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4640      	mov	r0, r8
 800593a:	4649      	mov	r1, r9
 800593c:	f7fa fc0e 	bl	800015c <__adddf3>
 8005940:	4652      	mov	r2, sl
 8005942:	465b      	mov	r3, fp
 8005944:	4606      	mov	r6, r0
 8005946:	460f      	mov	r7, r1
 8005948:	4620      	mov	r0, r4
 800594a:	4629      	mov	r1, r5
 800594c:	f7fa fdbc 	bl	80004c8 <__aeabi_dmul>
 8005950:	460b      	mov	r3, r1
 8005952:	4602      	mov	r2, r0
 8005954:	4680      	mov	r8, r0
 8005956:	4689      	mov	r9, r1
 8005958:	4630      	mov	r0, r6
 800595a:	4639      	mov	r1, r7
 800595c:	f7fa fbfe 	bl	800015c <__adddf3>
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <__ieee754_pow+0x40c>)
 8005962:	4604      	mov	r4, r0
 8005964:	4299      	cmp	r1, r3
 8005966:	460d      	mov	r5, r1
 8005968:	468a      	mov	sl, r1
 800596a:	468b      	mov	fp, r1
 800596c:	f340 82e0 	ble.w	8005f30 <__ieee754_pow+0x978>
 8005970:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005974:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005978:	4303      	orrs	r3, r0
 800597a:	f000 81df 	beq.w	8005d3c <__ieee754_pow+0x784>
 800597e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	2300      	movs	r3, #0
 8005986:	f7fb f811 	bl	80009ac <__aeabi_dcmplt>
 800598a:	3800      	subs	r0, #0
 800598c:	bf18      	it	ne
 800598e:	2001      	movne	r0, #1
 8005990:	e71d      	b.n	80057ce <__ieee754_pow+0x216>
 8005992:	bf00      	nop
 8005994:	f3af 8000 	nop.w
 8005998:	60000000 	.word	0x60000000
 800599c:	3ff71547 	.word	0x3ff71547
 80059a0:	f85ddf44 	.word	0xf85ddf44
 80059a4:	3e54ae0b 	.word	0x3e54ae0b
 80059a8:	55555555 	.word	0x55555555
 80059ac:	3fd55555 	.word	0x3fd55555
 80059b0:	652b82fe 	.word	0x652b82fe
 80059b4:	3ff71547 	.word	0x3ff71547
 80059b8:	3ff00000 	.word	0x3ff00000
 80059bc:	3fd00000 	.word	0x3fd00000
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	408fffff 	.word	0x408fffff
 80059c8:	4ad3      	ldr	r2, [pc, #844]	@ (8005d18 <__ieee754_pow+0x760>)
 80059ca:	402a      	ands	r2, r5
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	f040 817a 	bne.w	8005cc6 <__ieee754_pow+0x70e>
 80059d2:	4bd2      	ldr	r3, [pc, #840]	@ (8005d1c <__ieee754_pow+0x764>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	f7fa fd77 	bl	80004c8 <__aeabi_dmul>
 80059da:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80059de:	460b      	mov	r3, r1
 80059e0:	151a      	asrs	r2, r3, #20
 80059e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80059e6:	4422      	add	r2, r4
 80059e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80059ea:	4acd      	ldr	r2, [pc, #820]	@ (8005d20 <__ieee754_pow+0x768>)
 80059ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80059f4:	4293      	cmp	r3, r2
 80059f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80059fa:	dd08      	ble.n	8005a0e <__ieee754_pow+0x456>
 80059fc:	4ac9      	ldr	r2, [pc, #804]	@ (8005d24 <__ieee754_pow+0x76c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f340 8163 	ble.w	8005cca <__ieee754_pow+0x712>
 8005a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a06:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a0e:	2600      	movs	r6, #0
 8005a10:	00f3      	lsls	r3, r6, #3
 8005a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a14:	4bc4      	ldr	r3, [pc, #784]	@ (8005d28 <__ieee754_pow+0x770>)
 8005a16:	4629      	mov	r1, r5
 8005a18:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a20:	461a      	mov	r2, r3
 8005a22:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005a26:	4623      	mov	r3, r4
 8005a28:	4682      	mov	sl, r0
 8005a2a:	f7fa fb95 	bl	8000158 <__aeabi_dsub>
 8005a2e:	4652      	mov	r2, sl
 8005a30:	462b      	mov	r3, r5
 8005a32:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005a36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a3a:	f7fa fb8f 	bl	800015c <__adddf3>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	2000      	movs	r0, #0
 8005a44:	49b9      	ldr	r1, [pc, #740]	@ (8005d2c <__ieee754_pow+0x774>)
 8005a46:	f7fa fe69 	bl	800071c <__aeabi_ddiv>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a56:	f7fa fd37 	bl	80004c8 <__aeabi_dmul>
 8005a5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a5e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005a62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a66:	2300      	movs	r3, #0
 8005a68:	2200      	movs	r2, #0
 8005a6a:	46ab      	mov	fp, r5
 8005a6c:	106d      	asrs	r5, r5, #1
 8005a6e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005a78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a7c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005a80:	4640      	mov	r0, r8
 8005a82:	4649      	mov	r1, r9
 8005a84:	4614      	mov	r4, r2
 8005a86:	461d      	mov	r5, r3
 8005a88:	f7fa fd1e 	bl	80004c8 <__aeabi_dmul>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a94:	f7fa fb60 	bl	8000158 <__aeabi_dsub>
 8005a98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	460f      	mov	r7, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fb58 	bl	8000158 <__aeabi_dsub>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4650      	mov	r0, sl
 8005aae:	4659      	mov	r1, fp
 8005ab0:	f7fa fb52 	bl	8000158 <__aeabi_dsub>
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	f7fa fd06 	bl	80004c8 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fb48 	bl	8000158 <__aeabi_dsub>
 8005ac8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005acc:	f7fa fcfc 	bl	80004c8 <__aeabi_dmul>
 8005ad0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ad4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
 8005adc:	f7fa fcf4 	bl	80004c8 <__aeabi_dmul>
 8005ae0:	a37b      	add	r3, pc, #492	@ (adr r3, 8005cd0 <__ieee754_pow+0x718>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	460d      	mov	r5, r1
 8005aea:	f7fa fced 	bl	80004c8 <__aeabi_dmul>
 8005aee:	a37a      	add	r3, pc, #488	@ (adr r3, 8005cd8 <__ieee754_pow+0x720>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fb32 	bl	800015c <__adddf3>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	f7fa fce4 	bl	80004c8 <__aeabi_dmul>
 8005b00:	a377      	add	r3, pc, #476	@ (adr r3, 8005ce0 <__ieee754_pow+0x728>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fb29 	bl	800015c <__adddf3>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f7fa fcdb 	bl	80004c8 <__aeabi_dmul>
 8005b12:	a375      	add	r3, pc, #468	@ (adr r3, 8005ce8 <__ieee754_pow+0x730>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb20 	bl	800015c <__adddf3>
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	462b      	mov	r3, r5
 8005b20:	f7fa fcd2 	bl	80004c8 <__aeabi_dmul>
 8005b24:	a372      	add	r3, pc, #456	@ (adr r3, 8005cf0 <__ieee754_pow+0x738>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fb17 	bl	800015c <__adddf3>
 8005b2e:	4622      	mov	r2, r4
 8005b30:	462b      	mov	r3, r5
 8005b32:	f7fa fcc9 	bl	80004c8 <__aeabi_dmul>
 8005b36:	a370      	add	r3, pc, #448	@ (adr r3, 8005cf8 <__ieee754_pow+0x740>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fb0e 	bl	800015c <__adddf3>
 8005b40:	4622      	mov	r2, r4
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	462b      	mov	r3, r5
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fa fcbc 	bl	80004c8 <__aeabi_dmul>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4630      	mov	r0, r6
 8005b56:	4639      	mov	r1, r7
 8005b58:	f7fa fcb6 	bl	80004c8 <__aeabi_dmul>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	f7fa faf8 	bl	800015c <__adddf3>
 8005b6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b70:	f7fa fcaa 	bl	80004c8 <__aeabi_dmul>
 8005b74:	4622      	mov	r2, r4
 8005b76:	462b      	mov	r3, r5
 8005b78:	f7fa faf0 	bl	800015c <__adddf3>
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4682      	mov	sl, r0
 8005b80:	468b      	mov	fp, r1
 8005b82:	464b      	mov	r3, r9
 8005b84:	4640      	mov	r0, r8
 8005b86:	4649      	mov	r1, r9
 8005b88:	f7fa fc9e 	bl	80004c8 <__aeabi_dmul>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4b68      	ldr	r3, [pc, #416]	@ (8005d30 <__ieee754_pow+0x778>)
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	f7fa fae2 	bl	800015c <__adddf3>
 8005b98:	4652      	mov	r2, sl
 8005b9a:	465b      	mov	r3, fp
 8005b9c:	f7fa fade 	bl	800015c <__adddf3>
 8005ba0:	2400      	movs	r4, #0
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4640      	mov	r0, r8
 8005baa:	4649      	mov	r1, r9
 8005bac:	f7fa fc8c 	bl	80004c8 <__aeabi_dmul>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4b5d      	ldr	r3, [pc, #372]	@ (8005d30 <__ieee754_pow+0x778>)
 8005bbc:	f7fa facc 	bl	8000158 <__aeabi_dsub>
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	f7fa fac8 	bl	8000158 <__aeabi_dsub>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4650      	mov	r0, sl
 8005bce:	4659      	mov	r1, fp
 8005bd0:	f7fa fac2 	bl	8000158 <__aeabi_dsub>
 8005bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bd8:	f7fa fc76 	bl	80004c8 <__aeabi_dmul>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005be6:	462b      	mov	r3, r5
 8005be8:	f7fa fc6e 	bl	80004c8 <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fab2 	bl	800015c <__adddf3>
 8005bf8:	2400      	movs	r4, #0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa faa9 	bl	800015c <__adddf3>
 8005c0a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005d00 <__ieee754_pow+0x748>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	4620      	mov	r0, r4
 8005c12:	460d      	mov	r5, r1
 8005c14:	f7fa fc58 	bl	80004c8 <__aeabi_dmul>
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa fa98 	bl	8000158 <__aeabi_dsub>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	4639      	mov	r1, r7
 8005c30:	f7fa fa92 	bl	8000158 <__aeabi_dsub>
 8005c34:	a334      	add	r3, pc, #208	@ (adr r3, 8005d08 <__ieee754_pow+0x750>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fc45 	bl	80004c8 <__aeabi_dmul>
 8005c3e:	a334      	add	r3, pc, #208	@ (adr r3, 8005d10 <__ieee754_pow+0x758>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	4606      	mov	r6, r0
 8005c46:	460f      	mov	r7, r1
 8005c48:	4620      	mov	r0, r4
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f7fa fc3c 	bl	80004c8 <__aeabi_dmul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa fa80 	bl	800015c <__adddf3>
 8005c5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c5e:	4b35      	ldr	r3, [pc, #212]	@ (8005d34 <__ieee754_pow+0x77c>)
 8005c60:	2400      	movs	r4, #0
 8005c62:	4413      	add	r3, r2
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fa78 	bl	800015c <__adddf3>
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c70:	468b      	mov	fp, r1
 8005c72:	f7fa fbbf 	bl	80003f4 <__aeabi_i2d>
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d38 <__ieee754_pow+0x780>)
 8005c7e:	4413      	add	r3, r2
 8005c80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c84:	4652      	mov	r2, sl
 8005c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c8a:	465b      	mov	r3, fp
 8005c8c:	f7fa fa66 	bl	800015c <__adddf3>
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	f7fa fa62 	bl	800015c <__adddf3>
 8005c98:	4632      	mov	r2, r6
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	f7fa fa5e 	bl	800015c <__adddf3>
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	f7fa fa56 	bl	8000158 <__aeabi_dsub>
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	f7fa fa52 	bl	8000158 <__aeabi_dsub>
 8005cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cb8:	f7fa fa4e 	bl	8000158 <__aeabi_dsub>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4650      	mov	r0, sl
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	e618      	b.n	80058f8 <__ieee754_pow+0x340>
 8005cc6:	2400      	movs	r4, #0
 8005cc8:	e68a      	b.n	80059e0 <__ieee754_pow+0x428>
 8005cca:	2601      	movs	r6, #1
 8005ccc:	e6a0      	b.n	8005a10 <__ieee754_pow+0x458>
 8005cce:	bf00      	nop
 8005cd0:	4a454eef 	.word	0x4a454eef
 8005cd4:	3fca7e28 	.word	0x3fca7e28
 8005cd8:	93c9db65 	.word	0x93c9db65
 8005cdc:	3fcd864a 	.word	0x3fcd864a
 8005ce0:	a91d4101 	.word	0xa91d4101
 8005ce4:	3fd17460 	.word	0x3fd17460
 8005ce8:	518f264d 	.word	0x518f264d
 8005cec:	3fd55555 	.word	0x3fd55555
 8005cf0:	db6fabff 	.word	0xdb6fabff
 8005cf4:	3fdb6db6 	.word	0x3fdb6db6
 8005cf8:	33333303 	.word	0x33333303
 8005cfc:	3fe33333 	.word	0x3fe33333
 8005d00:	e0000000 	.word	0xe0000000
 8005d04:	3feec709 	.word	0x3feec709
 8005d08:	dc3a03fd 	.word	0xdc3a03fd
 8005d0c:	3feec709 	.word	0x3feec709
 8005d10:	145b01f5 	.word	0x145b01f5
 8005d14:	be3e2fe0 	.word	0xbe3e2fe0
 8005d18:	7ff00000 	.word	0x7ff00000
 8005d1c:	43400000 	.word	0x43400000
 8005d20:	0003988e 	.word	0x0003988e
 8005d24:	000bb679 	.word	0x000bb679
 8005d28:	080061f0 	.word	0x080061f0
 8005d2c:	3ff00000 	.word	0x3ff00000
 8005d30:	40080000 	.word	0x40080000
 8005d34:	080061d0 	.word	0x080061d0
 8005d38:	080061e0 	.word	0x080061e0
 8005d3c:	a39a      	add	r3, pc, #616	@ (adr r3, 8005fa8 <__ieee754_pow+0x9f0>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fa09 	bl	800015c <__adddf3>
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8005d50:	464b      	mov	r3, r9
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa f9ff 	bl	8000158 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d62:	f7fa fe41 	bl	80009e8 <__aeabi_dcmpgt>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f47f ae09 	bne.w	800597e <__ieee754_pow+0x3c6>
 8005d6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005d70:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005d74:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005d78:	fa43 fa0a 	asr.w	sl, r3, sl
 8005d7c:	44da      	add	sl, fp
 8005d7e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005d82:	489b      	ldr	r0, [pc, #620]	@ (8005ff0 <__ieee754_pow+0xa38>)
 8005d84:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005d88:	4108      	asrs	r0, r1
 8005d8a:	ea00 030a 	and.w	r3, r0, sl
 8005d8e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005d92:	f1c1 0114 	rsb	r1, r1, #20
 8005d96:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	fa4a fa01 	asr.w	sl, sl, r1
 8005da0:	f1bb 0f00 	cmp.w	fp, #0
 8005da4:	4649      	mov	r1, r9
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	bfb8      	it	lt
 8005dac:	f1ca 0a00 	rsblt	sl, sl, #0
 8005db0:	f7fa f9d2 	bl	8000158 <__aeabi_dsub>
 8005db4:	4680      	mov	r8, r0
 8005db6:	4689      	mov	r9, r1
 8005db8:	2400      	movs	r4, #0
 8005dba:	4632      	mov	r2, r6
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa f9cb 	bl	800015c <__adddf3>
 8005dc6:	a37a      	add	r3, pc, #488	@ (adr r3, 8005fb0 <__ieee754_pow+0x9f8>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	4620      	mov	r0, r4
 8005dce:	460d      	mov	r5, r1
 8005dd0:	f7fa fb7a 	bl	80004c8 <__aeabi_dmul>
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa f9ba 	bl	8000158 <__aeabi_dsub>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa f9b4 	bl	8000158 <__aeabi_dsub>
 8005df0:	a371      	add	r3, pc, #452	@ (adr r3, 8005fb8 <__ieee754_pow+0xa00>)
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f7fa fb67 	bl	80004c8 <__aeabi_dmul>
 8005dfa:	a371      	add	r3, pc, #452	@ (adr r3, 8005fc0 <__ieee754_pow+0xa08>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	4680      	mov	r8, r0
 8005e02:	4689      	mov	r9, r1
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fb5e 	bl	80004c8 <__aeabi_dmul>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa f9a2 	bl	800015c <__adddf3>
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e24:	f7fa f99a 	bl	800015c <__adddf3>
 8005e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	4689      	mov	r9, r1
 8005e30:	f7fa f992 	bl	8000158 <__aeabi_dsub>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa f98c 	bl	8000158 <__aeabi_dsub>
 8005e40:	4642      	mov	r2, r8
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	464b      	mov	r3, r9
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fb3c 	bl	80004c8 <__aeabi_dmul>
 8005e50:	a35d      	add	r3, pc, #372	@ (adr r3, 8005fc8 <__ieee754_pow+0xa10>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	4604      	mov	r4, r0
 8005e58:	460d      	mov	r5, r1
 8005e5a:	f7fa fb35 	bl	80004c8 <__aeabi_dmul>
 8005e5e:	a35c      	add	r3, pc, #368	@ (adr r3, 8005fd0 <__ieee754_pow+0xa18>)
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f7fa f978 	bl	8000158 <__aeabi_dsub>
 8005e68:	4622      	mov	r2, r4
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	f7fa fb2c 	bl	80004c8 <__aeabi_dmul>
 8005e70:	a359      	add	r3, pc, #356	@ (adr r3, 8005fd8 <__ieee754_pow+0xa20>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa f971 	bl	800015c <__adddf3>
 8005e7a:	4622      	mov	r2, r4
 8005e7c:	462b      	mov	r3, r5
 8005e7e:	f7fa fb23 	bl	80004c8 <__aeabi_dmul>
 8005e82:	a357      	add	r3, pc, #348	@ (adr r3, 8005fe0 <__ieee754_pow+0xa28>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa f966 	bl	8000158 <__aeabi_dsub>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	462b      	mov	r3, r5
 8005e90:	f7fa fb1a 	bl	80004c8 <__aeabi_dmul>
 8005e94:	a354      	add	r3, pc, #336	@ (adr r3, 8005fe8 <__ieee754_pow+0xa30>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f7fa f95f 	bl	800015c <__adddf3>
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	f7fa fb11 	bl	80004c8 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa f953 	bl	8000158 <__aeabi_dsub>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f7fa fb03 	bl	80004c8 <__aeabi_dmul>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ec8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f7fa f942 	bl	8000158 <__aeabi_dsub>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005edc:	f7fa fc1e 	bl	800071c <__aeabi_ddiv>
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa faec 	bl	80004c8 <__aeabi_dmul>
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	f7fa f932 	bl	800015c <__adddf3>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa f92a 	bl	8000158 <__aeabi_dsub>
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	f7fa f926 	bl	8000158 <__aeabi_dsub>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	2000      	movs	r0, #0
 8005f12:	4938      	ldr	r1, [pc, #224]	@ (8005ff4 <__ieee754_pow+0xa3c>)
 8005f14:	f7fa f920 	bl	8000158 <__aeabi_dsub>
 8005f18:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005f1c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8005f20:	da2e      	bge.n	8005f80 <__ieee754_pow+0x9c8>
 8005f22:	4652      	mov	r2, sl
 8005f24:	f000 f870 	bl	8006008 <scalbn>
 8005f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f2c:	f7ff bbed 	b.w	800570a <__ieee754_pow+0x152>
 8005f30:	4c31      	ldr	r4, [pc, #196]	@ (8005ff8 <__ieee754_pow+0xa40>)
 8005f32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	d91a      	bls.n	8005f70 <__ieee754_pow+0x9b8>
 8005f3a:	4b30      	ldr	r3, [pc, #192]	@ (8005ffc <__ieee754_pow+0xa44>)
 8005f3c:	440b      	add	r3, r1
 8005f3e:	4303      	orrs	r3, r0
 8005f40:	d009      	beq.n	8005f56 <__ieee754_pow+0x99e>
 8005f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f7fa fd2f 	bl	80009ac <__aeabi_dcmplt>
 8005f4e:	3800      	subs	r0, #0
 8005f50:	bf18      	it	ne
 8005f52:	2001      	movne	r0, #1
 8005f54:	e444      	b.n	80057e0 <__ieee754_pow+0x228>
 8005f56:	4642      	mov	r2, r8
 8005f58:	464b      	mov	r3, r9
 8005f5a:	f7fa f8fd 	bl	8000158 <__aeabi_dsub>
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463b      	mov	r3, r7
 8005f62:	f7fa fd37 	bl	80009d4 <__aeabi_dcmpge>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d1eb      	bne.n	8005f42 <__ieee754_pow+0x98a>
 8005f6a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006000 <__ieee754_pow+0xa48>
 8005f6e:	e6fd      	b.n	8005d6c <__ieee754_pow+0x7b4>
 8005f70:	469a      	mov	sl, r3
 8005f72:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <__ieee754_pow+0xa4c>)
 8005f74:	459a      	cmp	sl, r3
 8005f76:	f63f aef9 	bhi.w	8005d6c <__ieee754_pow+0x7b4>
 8005f7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005f7e:	e71b      	b.n	8005db8 <__ieee754_pow+0x800>
 8005f80:	4621      	mov	r1, r4
 8005f82:	e7d1      	b.n	8005f28 <__ieee754_pow+0x970>
 8005f84:	2000      	movs	r0, #0
 8005f86:	491b      	ldr	r1, [pc, #108]	@ (8005ff4 <__ieee754_pow+0xa3c>)
 8005f88:	f7ff bb34 	b.w	80055f4 <__ieee754_pow+0x3c>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	2100      	movs	r1, #0
 8005f90:	f7ff bb30 	b.w	80055f4 <__ieee754_pow+0x3c>
 8005f94:	4650      	mov	r0, sl
 8005f96:	4659      	mov	r1, fp
 8005f98:	f7ff bb2c 	b.w	80055f4 <__ieee754_pow+0x3c>
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f7ff bb79 	b.w	8005694 <__ieee754_pow+0xdc>
 8005fa2:	2400      	movs	r4, #0
 8005fa4:	f7ff bb64 	b.w	8005670 <__ieee754_pow+0xb8>
 8005fa8:	652b82fe 	.word	0x652b82fe
 8005fac:	3c971547 	.word	0x3c971547
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	3fe62e43 	.word	0x3fe62e43
 8005fb8:	fefa39ef 	.word	0xfefa39ef
 8005fbc:	3fe62e42 	.word	0x3fe62e42
 8005fc0:	0ca86c39 	.word	0x0ca86c39
 8005fc4:	be205c61 	.word	0xbe205c61
 8005fc8:	72bea4d0 	.word	0x72bea4d0
 8005fcc:	3e663769 	.word	0x3e663769
 8005fd0:	c5d26bf1 	.word	0xc5d26bf1
 8005fd4:	3ebbbd41 	.word	0x3ebbbd41
 8005fd8:	af25de2c 	.word	0xaf25de2c
 8005fdc:	3f11566a 	.word	0x3f11566a
 8005fe0:	16bebd93 	.word	0x16bebd93
 8005fe4:	3f66c16c 	.word	0x3f66c16c
 8005fe8:	5555553e 	.word	0x5555553e
 8005fec:	3fc55555 	.word	0x3fc55555
 8005ff0:	fff00000 	.word	0xfff00000
 8005ff4:	3ff00000 	.word	0x3ff00000
 8005ff8:	4090cbff 	.word	0x4090cbff
 8005ffc:	3f6f3400 	.word	0x3f6f3400
 8006000:	4090cc00 	.word	0x4090cc00
 8006004:	3fe00000 	.word	0x3fe00000

08006008 <scalbn>:
 8006008:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800600c:	4616      	mov	r6, r2
 800600e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006012:	4683      	mov	fp, r0
 8006014:	468c      	mov	ip, r1
 8006016:	460b      	mov	r3, r1
 8006018:	b982      	cbnz	r2, 800603c <scalbn+0x34>
 800601a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800601e:	4303      	orrs	r3, r0
 8006020:	d039      	beq.n	8006096 <scalbn+0x8e>
 8006022:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <scalbn+0xd8>)
 8006024:	2200      	movs	r2, #0
 8006026:	f7fa fa4f 	bl	80004c8 <__aeabi_dmul>
 800602a:	4b2e      	ldr	r3, [pc, #184]	@ (80060e4 <scalbn+0xdc>)
 800602c:	4683      	mov	fp, r0
 800602e:	429e      	cmp	r6, r3
 8006030:	468c      	mov	ip, r1
 8006032:	da0d      	bge.n	8006050 <scalbn+0x48>
 8006034:	a326      	add	r3, pc, #152	@ (adr r3, 80060d0 <scalbn+0xc8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	e01b      	b.n	8006074 <scalbn+0x6c>
 800603c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006040:	42ba      	cmp	r2, r7
 8006042:	d109      	bne.n	8006058 <scalbn+0x50>
 8006044:	4602      	mov	r2, r0
 8006046:	f7fa f889 	bl	800015c <__adddf3>
 800604a:	4683      	mov	fp, r0
 800604c:	468c      	mov	ip, r1
 800604e:	e022      	b.n	8006096 <scalbn+0x8e>
 8006050:	460b      	mov	r3, r1
 8006052:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006056:	3a36      	subs	r2, #54	@ 0x36
 8006058:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800605c:	428e      	cmp	r6, r1
 800605e:	dd0c      	ble.n	800607a <scalbn+0x72>
 8006060:	a31d      	add	r3, pc, #116	@ (adr r3, 80060d8 <scalbn+0xd0>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	461c      	mov	r4, r3
 8006068:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800606c:	f361 74df 	bfi	r4, r1, #31, #1
 8006070:	4621      	mov	r1, r4
 8006072:	481d      	ldr	r0, [pc, #116]	@ (80060e8 <scalbn+0xe0>)
 8006074:	f7fa fa28 	bl	80004c8 <__aeabi_dmul>
 8006078:	e7e7      	b.n	800604a <scalbn+0x42>
 800607a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800607e:	4432      	add	r2, r6
 8006080:	428a      	cmp	r2, r1
 8006082:	dced      	bgt.n	8006060 <scalbn+0x58>
 8006084:	2a00      	cmp	r2, #0
 8006086:	dd0a      	ble.n	800609e <scalbn+0x96>
 8006088:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800608c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006090:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006094:	46ac      	mov	ip, r5
 8006096:	4658      	mov	r0, fp
 8006098:	4661      	mov	r1, ip
 800609a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800609e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80060a2:	da09      	bge.n	80060b8 <scalbn+0xb0>
 80060a4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80060a8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80060ac:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80060b0:	480e      	ldr	r0, [pc, #56]	@ (80060ec <scalbn+0xe4>)
 80060b2:	f041 011f 	orr.w	r1, r1, #31
 80060b6:	e7bd      	b.n	8006034 <scalbn+0x2c>
 80060b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80060bc:	3236      	adds	r2, #54	@ 0x36
 80060be:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80060c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060c6:	4658      	mov	r0, fp
 80060c8:	4629      	mov	r1, r5
 80060ca:	2200      	movs	r2, #0
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <scalbn+0xe8>)
 80060ce:	e7d1      	b.n	8006074 <scalbn+0x6c>
 80060d0:	c2f8f359 	.word	0xc2f8f359
 80060d4:	01a56e1f 	.word	0x01a56e1f
 80060d8:	8800759c 	.word	0x8800759c
 80060dc:	7e37e43c 	.word	0x7e37e43c
 80060e0:	43500000 	.word	0x43500000
 80060e4:	ffff3cb0 	.word	0xffff3cb0
 80060e8:	8800759c 	.word	0x8800759c
 80060ec:	c2f8f359 	.word	0xc2f8f359
 80060f0:	3c900000 	.word	0x3c900000

080060f4 <with_errno>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4604      	mov	r4, r0
 80060f8:	460d      	mov	r5, r1
 80060fa:	4616      	mov	r6, r2
 80060fc:	f7fe ff36 	bl	8004f6c <__errno>
 8006100:	4629      	mov	r1, r5
 8006102:	6006      	str	r6, [r0, #0]
 8006104:	4620      	mov	r0, r4
 8006106:	bd70      	pop	{r4, r5, r6, pc}

08006108 <xflow>:
 8006108:	b513      	push	{r0, r1, r4, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	b10c      	cbz	r4, 8006116 <xflow+0xe>
 8006112:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006116:	e9cd 2300 	strd	r2, r3, [sp]
 800611a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800611e:	f7fa f9d3 	bl	80004c8 <__aeabi_dmul>
 8006122:	2222      	movs	r2, #34	@ 0x22
 8006124:	b002      	add	sp, #8
 8006126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612a:	f7ff bfe3 	b.w	80060f4 <with_errno>

0800612e <__math_uflow>:
 800612e:	2200      	movs	r2, #0
 8006130:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006134:	f7ff bfe8 	b.w	8006108 <xflow>

08006138 <__math_oflow>:
 8006138:	2200      	movs	r2, #0
 800613a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800613e:	f7ff bfe3 	b.w	8006108 <xflow>
	...

08006144 <_init>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	bf00      	nop
 8006148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614a:	bc08      	pop	{r3}
 800614c:	469e      	mov	lr, r3
 800614e:	4770      	bx	lr

08006150 <_fini>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr
